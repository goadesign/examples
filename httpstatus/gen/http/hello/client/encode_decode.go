// Code generated by goa v3.15.2, DO NOT EDIT.
//
// hello HTTP client encoders and decoders
//
// Command:
// $ goa gen goa.design/examples/httpstatus/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	hello "goa.design/examples/httpstatus/gen/hello"
	helloviews "goa.design/examples/httpstatus/gen/hello/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildHelloEndpointRequest instantiates a HTTP request object with method and
// path set to call the "hello" service "hello" endpoint
func (c *Client) BuildHelloEndpointRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		greeting string
	)
	{
		p, ok := v.(*hello.HelloPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("hello", "hello", "*hello.HelloPayload", v)
		}
		greeting = p.Greeting
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: HelloEndpointHelloPath(greeting)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("hello", "hello", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeHelloEndpointResponse returns a decoder for responses returned by the
// hello hello endpoint. restoreBody controls whether the response body should
// be restored after having been read.
func DecodeHelloEndpointResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body HelloCreatedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("hello", "hello", err)
			}
			p := NewHelloViewCreated(&body)
			tmp := "created"
			p.Outcome = &tmp
			view := "default"
			vres := &helloviews.Hello{Projected: p, View: view}
			if err = helloviews.ValidateHello(vres); err != nil {
				return nil, goahttp.ErrValidationError("hello", "hello", err)
			}
			res := hello.NewHello(vres)
			return res, nil
		case http.StatusAccepted:
			var (
				body HelloAcceptedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("hello", "hello", err)
			}
			p := NewHelloViewAccepted(&body)
			tmp := "accepted"
			p.Outcome = &tmp
			view := "default"
			vres := &helloviews.Hello{Projected: p, View: view}
			if err = helloviews.ValidateHello(vres); err != nil {
				return nil, goahttp.ErrValidationError("hello", "hello", err)
			}
			res := hello.NewHello(vres)
			return res, nil
		case http.StatusOK:
			var (
				body HelloOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("hello", "hello", err)
			}
			p := NewHelloViewOK(&body)
			view := "default"
			vres := &helloviews.Hello{Projected: p, View: view}
			if err = helloviews.ValidateHello(vres); err != nil {
				return nil, goahttp.ErrValidationError("hello", "hello", err)
			}
			res := hello.NewHello(vres)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("hello", "hello", resp.StatusCode, string(body))
		}
	}
}
