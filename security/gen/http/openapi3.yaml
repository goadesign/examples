openapi: 3.0.3
info:
  title: Security Example API
  description: This API demonstrates the use of the goa security DSL
  version: "1.0"
servers:
- url: http://localhost:80
  description: Default server for multi_auth
paths:
  /secure:
    get:
      tags:
      - secured_service
      summary: secure secured_service
      description: This action is secured with the jwt scheme
      operationId: secured_service#secure
      parameters:
      - name: fail
        in: query
        description: Whether to force auth failure even with a valid JWT
        allowEmptyValue: true
        schema:
          type: boolean
          description: Whether to force auth failure even with a valid JWT
          example: false
        example: false
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                type: string
                example: Dolores sunt nihil ut dolore et.
              example: Alias ea atque.
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                type: string
                example: Maxime ipsam esse et.
              example: Maxime ipsam esse et.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                type: string
                example: Voluptates a non itaque accusamus enim.
              example: Voluptates a non itaque accusamus enim.
      security:
      - jwt_header_Authorization:
        - api:read
        - api:write
    post:
      tags:
      - secured_service
      summary: also_doubly_secure secured_service
      description: This action is secured with the jwt scheme and also requires an
        API key header.
      operationId: secured_service#also_doubly_secure
      parameters:
      - name: k
        in: query
        description: API key
        allowEmptyValue: true
        schema:
          type: string
          description: API key
          example: abcdef12345
        example: abcdef12345
      - name: oauth
        in: query
        allowEmptyValue: true
        schema:
          type: string
          example: Deleniti tenetur et eaque nesciunt.
        example: Repudiandae qui sed optio odit dignissimos.
      - name: X-Authorization
        in: header
        description: JWT used for authentication
        allowEmptyValue: true
        schema:
          type: string
          description: JWT used for authentication
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                type: string
                example: Quos ut est ipsum consequatur fugiat at.
              example: Non nisi error ut inventore sequi.
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                type: string
                example: Est quod consequatur enim.
              example: Est quod consequatur enim.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                type: string
                example: Quia consequuntur assumenda magnam nostrum sed optio.
              example: Quia consequuntur assumenda magnam nostrum sed optio.
      security:
      - api_key_query_k: []
        jwt_header_X-Authorization:
        - api:read
        - api:write
      - basic_header_Authorization: []
        oauth2_query_oauth:
        - api:read
        - api:write
    put:
      tags:
      - secured_service
      summary: doubly_secure secured_service
      description: This action is secured with the jwt scheme and also requires an
        API key query string.
      operationId: secured_service#doubly_secure
      parameters:
      - name: k
        in: query
        description: API key
        allowEmptyValue: true
        required: true
        schema:
          type: string
          description: API key
          example: abcdef12345
        example: abcdef12345
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                type: string
                example: Aut expedita optio.
              example: Unde vero dicta minus.
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                type: string
                example: Nesciunt quae vero aut iste.
              example: Nesciunt quae vero aut iste.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                type: string
                example: Sint officia provident qui.
              example: Sint officia provident qui.
      security:
      - api_key_query_k: []
        jwt_header_Authorization:
        - api:read
        - api:write
  /signin:
    post:
      tags:
      - secured_service
      summary: signin secured_service
      description: Creates a valid JWT
      operationId: secured_service#signin
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Creds'
              example:
                api_key: abcdef12345
                jwt: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                oauth_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                type: string
                example: Reiciendis itaque enim quibusdam praesentium minus possimus.
              example: Reiciendis itaque enim quibusdam praesentium minus possimus.
      security:
      - basic_header_Authorization: []
components:
  schemas:
    Creds:
      type: object
      properties:
        api_key:
          type: string
          description: API Key
          example: abcdef12345
        jwt:
          type: string
          description: JWT token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        oauth_token:
          type: string
          description: OAuth2 token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      example:
        api_key: abcdef12345
        jwt: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        oauth_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      required:
      - jwt
      - api_key
      - oauth_token
  securitySchemes:
    api_key_query_k:
      type: apiKey
      description: Secures endpoint by requiring an API key.
      name: k
      in: query
    basic_header_Authorization:
      type: http
      description: Basic authentication used to authenticate security principal during
        signin
      scheme: basic
    jwt_header_Authorization:
      type: http
      description: Secures endpoint by requiring a valid JWT token retrieved via the
        signin endpoint. Supports scopes "api:read" and "api:write".
      scheme: bearer
    jwt_header_X-Authorization:
      type: http
      description: Secures endpoint by requiring a valid JWT token retrieved via the
        signin endpoint. Supports scopes "api:read" and "api:write".
      scheme: bearer
    oauth2_query_oauth:
      type: oauth2
      description: Secures endpoint by requiring a valid OAuth2 token retrieved via
        the signin endpoint. Supports scopes "api:read" and "api:write".
      flows:
        authorizationCode:
          authorizationUrl: http://goa.design/authorization
          tokenUrl: http://goa.design/token
          refreshUrl: http://goa.design/refresh
          scopes:
            api:read: Read-only access
            api:write: Read and write access
tags:
- name: secured_service
  description: The secured service exposes endpoints that require valid authorization
    credentials.
