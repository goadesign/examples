// Code generated with goa v3.21.5, DO NOT EDIT.
//
// chatter protocol buffer definition
//
// Command:
// $ goa gen goa.design/examples/streaming/design

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: goagen_streaming_chatter.proto

package chatterpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Chatter_Login_FullMethodName     = "/chatter.Chatter/Login"
	Chatter_Echoer_FullMethodName    = "/chatter.Chatter/Echoer"
	Chatter_Listener_FullMethodName  = "/chatter.Chatter/Listener"
	Chatter_Summary_FullMethodName   = "/chatter.Chatter/Summary"
	Chatter_Subscribe_FullMethodName = "/chatter.Chatter/Subscribe"
	Chatter_History_FullMethodName   = "/chatter.Chatter/History"
)

// ChatterClient is the client API for Chatter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The chatter service implements a simple client and server chat.
type ChatterClient interface {
	// Creates a valid JWT token for auth to chat.
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// Echoes the message sent by the client.
	Echoer(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[EchoerStreamingRequest, EchoerResponse], error)
	// Listens to the messages sent by the client.
	Listener(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ListenerStreamingRequest, ListenerResponse], error)
	// Summarizes the chat messages sent by the client.
	Summary(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SummaryStreamingRequest, ChatSummaryCollection], error)
	// Subscribe to events sent when new chat messages are added.
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeResponse], error)
	// Returns the chat messages sent to the server.
	History(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HistoryResponse], error)
}

type chatterClient struct {
	cc grpc.ClientConnInterface
}

func NewChatterClient(cc grpc.ClientConnInterface) ChatterClient {
	return &chatterClient{cc}
}

func (c *chatterClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, Chatter_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatterClient) Echoer(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[EchoerStreamingRequest, EchoerResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Chatter_ServiceDesc.Streams[0], Chatter_Echoer_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EchoerStreamingRequest, EchoerResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chatter_EchoerClient = grpc.BidiStreamingClient[EchoerStreamingRequest, EchoerResponse]

func (c *chatterClient) Listener(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ListenerStreamingRequest, ListenerResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Chatter_ServiceDesc.Streams[1], Chatter_Listener_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListenerStreamingRequest, ListenerResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chatter_ListenerClient = grpc.ClientStreamingClient[ListenerStreamingRequest, ListenerResponse]

func (c *chatterClient) Summary(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SummaryStreamingRequest, ChatSummaryCollection], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Chatter_ServiceDesc.Streams[2], Chatter_Summary_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SummaryStreamingRequest, ChatSummaryCollection]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chatter_SummaryClient = grpc.ClientStreamingClient[SummaryStreamingRequest, ChatSummaryCollection]

func (c *chatterClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Chatter_ServiceDesc.Streams[3], Chatter_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRequest, SubscribeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chatter_SubscribeClient = grpc.ServerStreamingClient[SubscribeResponse]

func (c *chatterClient) History(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HistoryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Chatter_ServiceDesc.Streams[4], Chatter_History_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HistoryRequest, HistoryResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chatter_HistoryClient = grpc.ServerStreamingClient[HistoryResponse]

// ChatterServer is the server API for Chatter service.
// All implementations must embed UnimplementedChatterServer
// for forward compatibility.
//
// The chatter service implements a simple client and server chat.
type ChatterServer interface {
	// Creates a valid JWT token for auth to chat.
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// Echoes the message sent by the client.
	Echoer(grpc.BidiStreamingServer[EchoerStreamingRequest, EchoerResponse]) error
	// Listens to the messages sent by the client.
	Listener(grpc.ClientStreamingServer[ListenerStreamingRequest, ListenerResponse]) error
	// Summarizes the chat messages sent by the client.
	Summary(grpc.ClientStreamingServer[SummaryStreamingRequest, ChatSummaryCollection]) error
	// Subscribe to events sent when new chat messages are added.
	Subscribe(*SubscribeRequest, grpc.ServerStreamingServer[SubscribeResponse]) error
	// Returns the chat messages sent to the server.
	History(*HistoryRequest, grpc.ServerStreamingServer[HistoryResponse]) error
	mustEmbedUnimplementedChatterServer()
}

// UnimplementedChatterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChatterServer struct{}

func (UnimplementedChatterServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedChatterServer) Echoer(grpc.BidiStreamingServer[EchoerStreamingRequest, EchoerResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Echoer not implemented")
}
func (UnimplementedChatterServer) Listener(grpc.ClientStreamingServer[ListenerStreamingRequest, ListenerResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Listener not implemented")
}
func (UnimplementedChatterServer) Summary(grpc.ClientStreamingServer[SummaryStreamingRequest, ChatSummaryCollection]) error {
	return status.Errorf(codes.Unimplemented, "method Summary not implemented")
}
func (UnimplementedChatterServer) Subscribe(*SubscribeRequest, grpc.ServerStreamingServer[SubscribeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedChatterServer) History(*HistoryRequest, grpc.ServerStreamingServer[HistoryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method History not implemented")
}
func (UnimplementedChatterServer) mustEmbedUnimplementedChatterServer() {}
func (UnimplementedChatterServer) testEmbeddedByValue()                 {}

// UnsafeChatterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatterServer will
// result in compilation errors.
type UnsafeChatterServer interface {
	mustEmbedUnimplementedChatterServer()
}

func RegisterChatterServer(s grpc.ServiceRegistrar, srv ChatterServer) {
	// If the following call pancis, it indicates UnimplementedChatterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Chatter_ServiceDesc, srv)
}

func _Chatter_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatterServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chatter_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatterServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chatter_Echoer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatterServer).Echoer(&grpc.GenericServerStream[EchoerStreamingRequest, EchoerResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chatter_EchoerServer = grpc.BidiStreamingServer[EchoerStreamingRequest, EchoerResponse]

func _Chatter_Listener_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatterServer).Listener(&grpc.GenericServerStream[ListenerStreamingRequest, ListenerResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chatter_ListenerServer = grpc.ClientStreamingServer[ListenerStreamingRequest, ListenerResponse]

func _Chatter_Summary_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatterServer).Summary(&grpc.GenericServerStream[SummaryStreamingRequest, ChatSummaryCollection]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chatter_SummaryServer = grpc.ClientStreamingServer[SummaryStreamingRequest, ChatSummaryCollection]

func _Chatter_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatterServer).Subscribe(m, &grpc.GenericServerStream[SubscribeRequest, SubscribeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chatter_SubscribeServer = grpc.ServerStreamingServer[SubscribeResponse]

func _Chatter_History_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HistoryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatterServer).History(m, &grpc.GenericServerStream[HistoryRequest, HistoryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chatter_HistoryServer = grpc.ServerStreamingServer[HistoryResponse]

// Chatter_ServiceDesc is the grpc.ServiceDesc for Chatter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chatter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatter.Chatter",
	HandlerType: (*ChatterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Chatter_Login_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Echoer",
			Handler:       _Chatter_Echoer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Listener",
			Handler:       _Chatter_Listener_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Summary",
			Handler:       _Chatter_Summary_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _Chatter_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "History",
			Handler:       _Chatter_History_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "goagen_streaming_chatter.proto",
}
