// Code generated with goa v3.22.1, DO NOT EDIT.
//
// sommelier protocol buffer definition
//
// Command:
// $ goa gen goa.design/examples/cellar/design

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: goagen_cellar_sommelier.proto

package sommelierpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PickRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of bottle to pick
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Varietals in preference order
	Varietal []string `protobuf:"bytes,2,rep,name=varietal,proto3" json:"varietal,omitempty"`
	// Winery of bottle to pick
	Winery        *string `protobuf:"bytes,3,opt,name=winery,proto3,oneof" json:"winery,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PickRequest) Reset() {
	*x = PickRequest{}
	mi := &file_goagen_cellar_sommelier_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PickRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickRequest) ProtoMessage() {}

func (x *PickRequest) ProtoReflect() protoreflect.Message {
	mi := &file_goagen_cellar_sommelier_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickRequest.ProtoReflect.Descriptor instead.
func (*PickRequest) Descriptor() ([]byte, []int) {
	return file_goagen_cellar_sommelier_proto_rawDescGZIP(), []int{0}
}

func (x *PickRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PickRequest) GetVarietal() []string {
	if x != nil {
		return x.Varietal
	}
	return nil
}

func (x *PickRequest) GetWinery() string {
	if x != nil && x.Winery != nil {
		return *x.Winery
	}
	return ""
}

type StoredBottleCollection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field         []*StoredBottle        `protobuf:"bytes,1,rep,name=field,proto3" json:"field,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoredBottleCollection) Reset() {
	*x = StoredBottleCollection{}
	mi := &file_goagen_cellar_sommelier_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoredBottleCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoredBottleCollection) ProtoMessage() {}

func (x *StoredBottleCollection) ProtoReflect() protoreflect.Message {
	mi := &file_goagen_cellar_sommelier_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoredBottleCollection.ProtoReflect.Descriptor instead.
func (*StoredBottleCollection) Descriptor() ([]byte, []int) {
	return file_goagen_cellar_sommelier_proto_rawDescGZIP(), []int{1}
}

func (x *StoredBottleCollection) GetField() []*StoredBottle {
	if x != nil {
		return x.Field
	}
	return nil
}

// A StoredBottle describes a bottle retrieved by the storage service.
type StoredBottle struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID is the unique id of the bottle.
	Id string `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`
	// Name of bottle
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Winery that produces wine
	Winery *Winery `protobuf:"bytes,3,opt,name=winery,proto3" json:"winery,omitempty"`
	// Vintage of bottle
	Vintage uint32 `protobuf:"varint,4,opt,name=vintage,proto3" json:"vintage,omitempty"`
	// Composition is the list of grape varietals and associated percentage.
	Composition []*Component `protobuf:"bytes,5,rep,name=composition,proto3" json:"composition,omitempty"`
	// Description of bottle
	Description *string `protobuf:"bytes,6,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Rating of bottle from 1 (worst) to 5 (best)
	Rating        *uint32 `protobuf:"varint,7,opt,name=rating,proto3,oneof" json:"rating,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoredBottle) Reset() {
	*x = StoredBottle{}
	mi := &file_goagen_cellar_sommelier_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoredBottle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoredBottle) ProtoMessage() {}

func (x *StoredBottle) ProtoReflect() protoreflect.Message {
	mi := &file_goagen_cellar_sommelier_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoredBottle.ProtoReflect.Descriptor instead.
func (*StoredBottle) Descriptor() ([]byte, []int) {
	return file_goagen_cellar_sommelier_proto_rawDescGZIP(), []int{2}
}

func (x *StoredBottle) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StoredBottle) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StoredBottle) GetWinery() *Winery {
	if x != nil {
		return x.Winery
	}
	return nil
}

func (x *StoredBottle) GetVintage() uint32 {
	if x != nil {
		return x.Vintage
	}
	return 0
}

func (x *StoredBottle) GetComposition() []*Component {
	if x != nil {
		return x.Composition
	}
	return nil
}

func (x *StoredBottle) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *StoredBottle) GetRating() uint32 {
	if x != nil && x.Rating != nil {
		return *x.Rating
	}
	return 0
}

type Winery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of winery
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Region of winery
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	// Country of winery
	Country string `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	// Winery website URL
	Url           *string `protobuf:"bytes,4,opt,name=url,proto3,oneof" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Winery) Reset() {
	*x = Winery{}
	mi := &file_goagen_cellar_sommelier_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Winery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Winery) ProtoMessage() {}

func (x *Winery) ProtoReflect() protoreflect.Message {
	mi := &file_goagen_cellar_sommelier_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Winery.ProtoReflect.Descriptor instead.
func (*Winery) Descriptor() ([]byte, []int) {
	return file_goagen_cellar_sommelier_proto_rawDescGZIP(), []int{3}
}

func (x *Winery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Winery) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Winery) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Winery) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

type Component struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Grape varietal
	Varietal string `protobuf:"bytes,1,opt,name=varietal,proto3" json:"varietal,omitempty"`
	// Percentage of varietal in wine
	Percentage    *uint32 `protobuf:"varint,2,opt,name=percentage,proto3,oneof" json:"percentage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Component) Reset() {
	*x = Component{}
	mi := &file_goagen_cellar_sommelier_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component) ProtoMessage() {}

func (x *Component) ProtoReflect() protoreflect.Message {
	mi := &file_goagen_cellar_sommelier_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component.ProtoReflect.Descriptor instead.
func (*Component) Descriptor() ([]byte, []int) {
	return file_goagen_cellar_sommelier_proto_rawDescGZIP(), []int{4}
}

func (x *Component) GetVarietal() string {
	if x != nil {
		return x.Varietal
	}
	return ""
}

func (x *Component) GetPercentage() uint32 {
	if x != nil && x.Percentage != nil {
		return *x.Percentage
	}
	return 0
}

var File_goagen_cellar_sommelier_proto protoreflect.FileDescriptor

const file_goagen_cellar_sommelier_proto_rawDesc = "" +
	"\n" +
	"\x1dgoagen_cellar_sommelier.proto\x12\tsommelier\"s\n" +
	"\vPickRequest\x12\x17\n" +
	"\x04name\x18\x01 \x01(\tH\x00R\x04name\x88\x01\x01\x12\x1a\n" +
	"\bvarietal\x18\x02 \x03(\tR\bvarietal\x12\x1b\n" +
	"\x06winery\x18\x03 \x01(\tH\x01R\x06winery\x88\x01\x01B\a\n" +
	"\x05_nameB\t\n" +
	"\a_winery\"G\n" +
	"\x16StoredBottleCollection\x12-\n" +
	"\x05field\x18\x01 \x03(\v2\x17.sommelier.StoredBottleR\x05field\"\x8e\x02\n" +
	"\fStoredBottle\x12\x0e\n" +
	"\x02id\x18\b \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12)\n" +
	"\x06winery\x18\x03 \x01(\v2\x11.sommelier.WineryR\x06winery\x12\x18\n" +
	"\avintage\x18\x04 \x01(\rR\avintage\x126\n" +
	"\vcomposition\x18\x05 \x03(\v2\x14.sommelier.ComponentR\vcomposition\x12%\n" +
	"\vdescription\x18\x06 \x01(\tH\x00R\vdescription\x88\x01\x01\x12\x1b\n" +
	"\x06rating\x18\a \x01(\rH\x01R\x06rating\x88\x01\x01B\x0e\n" +
	"\f_descriptionB\t\n" +
	"\a_rating\"m\n" +
	"\x06Winery\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x16\n" +
	"\x06region\x18\x02 \x01(\tR\x06region\x12\x18\n" +
	"\acountry\x18\x03 \x01(\tR\acountry\x12\x15\n" +
	"\x03url\x18\x04 \x01(\tH\x00R\x03url\x88\x01\x01B\x06\n" +
	"\x04_url\"[\n" +
	"\tComponent\x12\x1a\n" +
	"\bvarietal\x18\x01 \x01(\tR\bvarietal\x12#\n" +
	"\n" +
	"percentage\x18\x02 \x01(\rH\x00R\n" +
	"percentage\x88\x01\x01B\r\n" +
	"\v_percentage2N\n" +
	"\tSommelier\x12A\n" +
	"\x04Pick\x12\x16.sommelier.PickRequest\x1a!.sommelier.StoredBottleCollectionB\x0eZ\f/sommelierpbb\x06proto3"

var (
	file_goagen_cellar_sommelier_proto_rawDescOnce sync.Once
	file_goagen_cellar_sommelier_proto_rawDescData []byte
)

func file_goagen_cellar_sommelier_proto_rawDescGZIP() []byte {
	file_goagen_cellar_sommelier_proto_rawDescOnce.Do(func() {
		file_goagen_cellar_sommelier_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_goagen_cellar_sommelier_proto_rawDesc), len(file_goagen_cellar_sommelier_proto_rawDesc)))
	})
	return file_goagen_cellar_sommelier_proto_rawDescData
}

var file_goagen_cellar_sommelier_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_goagen_cellar_sommelier_proto_goTypes = []any{
	(*PickRequest)(nil),            // 0: sommelier.PickRequest
	(*StoredBottleCollection)(nil), // 1: sommelier.StoredBottleCollection
	(*StoredBottle)(nil),           // 2: sommelier.StoredBottle
	(*Winery)(nil),                 // 3: sommelier.Winery
	(*Component)(nil),              // 4: sommelier.Component
}
var file_goagen_cellar_sommelier_proto_depIdxs = []int32{
	2, // 0: sommelier.StoredBottleCollection.field:type_name -> sommelier.StoredBottle
	3, // 1: sommelier.StoredBottle.winery:type_name -> sommelier.Winery
	4, // 2: sommelier.StoredBottle.composition:type_name -> sommelier.Component
	0, // 3: sommelier.Sommelier.Pick:input_type -> sommelier.PickRequest
	1, // 4: sommelier.Sommelier.Pick:output_type -> sommelier.StoredBottleCollection
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_goagen_cellar_sommelier_proto_init() }
func file_goagen_cellar_sommelier_proto_init() {
	if File_goagen_cellar_sommelier_proto != nil {
		return
	}
	file_goagen_cellar_sommelier_proto_msgTypes[0].OneofWrappers = []any{}
	file_goagen_cellar_sommelier_proto_msgTypes[2].OneofWrappers = []any{}
	file_goagen_cellar_sommelier_proto_msgTypes[3].OneofWrappers = []any{}
	file_goagen_cellar_sommelier_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_goagen_cellar_sommelier_proto_rawDesc), len(file_goagen_cellar_sommelier_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_goagen_cellar_sommelier_proto_goTypes,
		DependencyIndexes: file_goagen_cellar_sommelier_proto_depIdxs,
		MessageInfos:      file_goagen_cellar_sommelier_proto_msgTypes,
	}.Build()
	File_goagen_cellar_sommelier_proto = out.File
	file_goagen_cellar_sommelier_proto_goTypes = nil
	file_goagen_cellar_sommelier_proto_depIdxs = nil
}
