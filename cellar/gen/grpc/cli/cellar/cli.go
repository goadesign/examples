// Code generated by goa v3.22.3, DO NOT EDIT.
//
// cellar gRPC client CLI support package
//
// Command:
// $ goa gen goa.design/examples/cellar/design

package cli

import (
	"flag"
	"fmt"
	"os"

	sommelierc "goa.design/examples/cellar/gen/grpc/sommelier/client"
	storagec "goa.design/examples/cellar/gen/grpc/storage/client"
	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() []string {
	return []string{
		"sommelier pick",
		"storage (list|show|add|remove|rate|multi-add|multi-update)",
	}
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` sommelier pick --message '{
      "name": "Blue\'s Cuvee",
      "varietal": [
         "pinot noir",
         "merlot",
         "cabernet franc"
      ],
      "winery": "longoria"
   }'` + "\n" +
		os.Args[0] + ` storage list` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	cc *grpc.ClientConn,
	opts ...grpc.CallOption,
) (goa.Endpoint, any, error) {
	var (
		sommelierFlags = flag.NewFlagSet("sommelier", flag.ContinueOnError)

		sommelierPickFlags       = flag.NewFlagSet("pick", flag.ExitOnError)
		sommelierPickMessageFlag = sommelierPickFlags.String("message", "", "")

		storageFlags = flag.NewFlagSet("storage", flag.ContinueOnError)

		storageListFlags = flag.NewFlagSet("list", flag.ExitOnError)

		storageShowFlags       = flag.NewFlagSet("show", flag.ExitOnError)
		storageShowMessageFlag = storageShowFlags.String("message", "", "")
		storageShowViewFlag    = storageShowFlags.String("view", "", "")

		storageAddFlags       = flag.NewFlagSet("add", flag.ExitOnError)
		storageAddMessageFlag = storageAddFlags.String("message", "", "")

		storageRemoveFlags       = flag.NewFlagSet("remove", flag.ExitOnError)
		storageRemoveMessageFlag = storageRemoveFlags.String("message", "", "")

		storageRateFlags       = flag.NewFlagSet("rate", flag.ExitOnError)
		storageRateMessageFlag = storageRateFlags.String("message", "", "")

		storageMultiAddFlags       = flag.NewFlagSet("multi-add", flag.ExitOnError)
		storageMultiAddMessageFlag = storageMultiAddFlags.String("message", "", "")

		storageMultiUpdateFlags       = flag.NewFlagSet("multi-update", flag.ExitOnError)
		storageMultiUpdateMessageFlag = storageMultiUpdateFlags.String("message", "", "")
	)
	sommelierFlags.Usage = sommelierUsage
	sommelierPickFlags.Usage = sommelierPickUsage

	storageFlags.Usage = storageUsage
	storageListFlags.Usage = storageListUsage
	storageShowFlags.Usage = storageShowUsage
	storageAddFlags.Usage = storageAddUsage
	storageRemoveFlags.Usage = storageRemoveUsage
	storageRateFlags.Usage = storageRateUsage
	storageMultiAddFlags.Usage = storageMultiAddUsage
	storageMultiUpdateFlags.Usage = storageMultiUpdateUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "sommelier":
			svcf = sommelierFlags
		case "storage":
			svcf = storageFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "sommelier":
			switch epn {
			case "pick":
				epf = sommelierPickFlags

			}

		case "storage":
			switch epn {
			case "list":
				epf = storageListFlags

			case "show":
				epf = storageShowFlags

			case "add":
				epf = storageAddFlags

			case "remove":
				epf = storageRemoveFlags

			case "rate":
				epf = storageRateFlags

			case "multi-add":
				epf = storageMultiAddFlags

			case "multi-update":
				epf = storageMultiUpdateFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "sommelier":
			c := sommelierc.NewClient(cc, opts...)
			switch epn {
			case "pick":
				endpoint = c.Pick()
				data, err = sommelierc.BuildPickPayload(*sommelierPickMessageFlag)
			}
		case "storage":
			c := storagec.NewClient(cc, opts...)
			switch epn {
			case "list":
				endpoint = c.List()
			case "show":
				endpoint = c.Show()
				data, err = storagec.BuildShowPayload(*storageShowMessageFlag, *storageShowViewFlag)
			case "add":
				endpoint = c.Add()
				data, err = storagec.BuildAddPayload(*storageAddMessageFlag)
			case "remove":
				endpoint = c.Remove()
				data, err = storagec.BuildRemovePayload(*storageRemoveMessageFlag)
			case "rate":
				endpoint = c.Rate()
				data, err = storagec.BuildRatePayload(*storageRateMessageFlag)
			case "multi-add":
				endpoint = c.MultiAdd()
				data, err = storagec.BuildMultiAddPayload(*storageMultiAddMessageFlag)
			case "multi-update":
				endpoint = c.MultiUpdate()
				data, err = storagec.BuildMultiUpdatePayload(*storageMultiUpdateMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// sommelierUsage displays the usage of the sommelier command and its
// subcommands.
func sommelierUsage() {
	fmt.Fprintln(os.Stderr, `The sommelier service retrieves bottles given a set of criteria.`)
	fmt.Fprintf(os.Stderr, "Usage:\n    %s [globalflags] sommelier COMMAND [flags]\n\n", os.Args[0])
	fmt.Fprintln(os.Stderr, "COMMAND:")
	fmt.Fprintln(os.Stderr, `    pick: Pick implements pick.`)
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Additional help:")
	fmt.Fprintf(os.Stderr, "    %s sommelier COMMAND --help\n", os.Args[0])
}
func sommelierPickUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] sommelier pick", os.Args[0])
	fmt.Fprint(os.Stderr, " -message JSON")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Pick implements pick.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -message JSON: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `sommelier pick --message '{
      "name": "Blue\'s Cuvee",
      "varietal": [
         "pinot noir",
         "merlot",
         "cabernet franc"
      ],
      "winery": "longoria"
   }'`)
}

// storageUsage displays the usage of the storage command and its subcommands.
func storageUsage() {
	fmt.Fprintln(os.Stderr, `The storage service makes it possible to view, add or remove wine bottles.`)
	fmt.Fprintf(os.Stderr, "Usage:\n    %s [globalflags] storage COMMAND [flags]\n\n", os.Args[0])
	fmt.Fprintln(os.Stderr, "COMMAND:")
	fmt.Fprintln(os.Stderr, `    list: List all stored bottles`)
	fmt.Fprintln(os.Stderr, `    show: Show bottle by ID`)
	fmt.Fprintln(os.Stderr, `    add: Add new bottle and return its ID.`)
	fmt.Fprintln(os.Stderr, `    remove: Remove bottle from storage`)
	fmt.Fprintln(os.Stderr, `    rate: Rate bottles by IDs`)
	fmt.Fprintln(os.Stderr, `    multi-add: Add n number of bottles and return their IDs. This is a multipart request and each part has field name 'bottle' and contains the encoded bottle info to be added.`)
	fmt.Fprintln(os.Stderr, `    multi-update: Update bottles with the given IDs. This is a multipart request and each part has field name 'bottle' and contains the encoded bottle info to be updated. The IDs in the query parameter is mapped to each part in the request.`)
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Additional help:")
	fmt.Fprintf(os.Stderr, "    %s storage COMMAND --help\n", os.Args[0])
}
func storageListUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] storage list", os.Args[0])
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `List all stored bottles`)

	// Flags list

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `storage list`)
}

func storageShowUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] storage show", os.Args[0])
	fmt.Fprint(os.Stderr, " -message JSON")
	fmt.Fprint(os.Stderr, " -view STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Show bottle by ID`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -message JSON: `)
	fmt.Fprintln(os.Stderr, `    -view STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `storage show --message '{
      "id": "Nobis accusamus qui totam minus nihil iure."
   }' --view "tiny"`)
}

func storageAddUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] storage add", os.Args[0])
	fmt.Fprint(os.Stderr, " -message JSON")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Add new bottle and return its ID.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -message JSON: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `storage add --message '{
      "composition": [
         {
            "percentage": 73,
            "varietal": "Syrah"
         },
         {
            "percentage": 73,
            "varietal": "Syrah"
         },
         {
            "percentage": 73,
            "varietal": "Syrah"
         }
      ],
      "description": "Red wine blend with an emphasis on the Cabernet Franc grape and including other Bordeaux grape varietals and some Syrah",
      "name": "Blue\'s Cuvee",
      "rating": 2,
      "vintage": 1994,
      "winery": {
         "country": "USA",
         "name": "Longoria",
         "region": "Central Coast, California",
         "url": "http://www.longoriawine.com/"
      }
   }'`)
}

func storageRemoveUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] storage remove", os.Args[0])
	fmt.Fprint(os.Stderr, " -message JSON")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Remove bottle from storage`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -message JSON: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `storage remove --message '{
      "id": "Perspiciatis nobis assumenda voluptas voluptas."
   }'`)
}

func storageRateUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] storage rate", os.Args[0])
	fmt.Fprint(os.Stderr, " -message JSON")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Rate bottles by IDs`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -message JSON: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `storage rate --message '{
      "field": {
         "2526214872": {
            "field": [
               "Qui aliquid sit et.",
               "In est.",
               "Illo perferendis et qui odio dolore.",
               "Suscipit ea praesentium repudiandae quia."
            ]
         },
         "463023855": {
            "field": [
               "Qui aliquid sit et.",
               "In est.",
               "Illo perferendis et qui odio dolore.",
               "Suscipit ea praesentium repudiandae quia."
            ]
         },
         "822453369": {
            "field": [
               "Qui aliquid sit et.",
               "In est.",
               "Illo perferendis et qui odio dolore.",
               "Suscipit ea praesentium repudiandae quia."
            ]
         }
      }
   }'`)
}

func storageMultiAddUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] storage multi-add", os.Args[0])
	fmt.Fprint(os.Stderr, " -message JSON")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Add n number of bottles and return their IDs. This is a multipart request and each part has field name 'bottle' and contains the encoded bottle info to be added.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -message JSON: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `storage multi-add --message '{
      "field": [
         {
            "composition": [
               {
                  "percentage": 73,
                  "varietal": "Syrah"
               },
               {
                  "percentage": 73,
                  "varietal": "Syrah"
               }
            ],
            "description": "Red wine blend with an emphasis on the Cabernet Franc grape and including other Bordeaux grape varietals and some Syrah",
            "name": "Blue\'s Cuvee",
            "rating": 2,
            "vintage": 2005,
            "winery": {
               "country": "USA",
               "name": "Longoria",
               "region": "Central Coast, California",
               "url": "http://www.longoriawine.com/"
            }
         },
         {
            "composition": [
               {
                  "percentage": 73,
                  "varietal": "Syrah"
               },
               {
                  "percentage": 73,
                  "varietal": "Syrah"
               }
            ],
            "description": "Red wine blend with an emphasis on the Cabernet Franc grape and including other Bordeaux grape varietals and some Syrah",
            "name": "Blue\'s Cuvee",
            "rating": 2,
            "vintage": 2005,
            "winery": {
               "country": "USA",
               "name": "Longoria",
               "region": "Central Coast, California",
               "url": "http://www.longoriawine.com/"
            }
         },
         {
            "composition": [
               {
                  "percentage": 73,
                  "varietal": "Syrah"
               },
               {
                  "percentage": 73,
                  "varietal": "Syrah"
               }
            ],
            "description": "Red wine blend with an emphasis on the Cabernet Franc grape and including other Bordeaux grape varietals and some Syrah",
            "name": "Blue\'s Cuvee",
            "rating": 2,
            "vintage": 2005,
            "winery": {
               "country": "USA",
               "name": "Longoria",
               "region": "Central Coast, California",
               "url": "http://www.longoriawine.com/"
            }
         }
      ]
   }'`)
}

func storageMultiUpdateUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] storage multi-update", os.Args[0])
	fmt.Fprint(os.Stderr, " -message JSON")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Update bottles with the given IDs. This is a multipart request and each part has field name 'bottle' and contains the encoded bottle info to be updated. The IDs in the query parameter is mapped to each part in the request.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -message JSON: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `storage multi-update --message '{
      "bottles": [
         {
            "composition": [
               {
                  "percentage": 73,
                  "varietal": "Syrah"
               },
               {
                  "percentage": 73,
                  "varietal": "Syrah"
               }
            ],
            "description": "Red wine blend with an emphasis on the Cabernet Franc grape and including other Bordeaux grape varietals and some Syrah",
            "name": "Blue\'s Cuvee",
            "rating": 2,
            "vintage": 2005,
            "winery": {
               "country": "USA",
               "name": "Longoria",
               "region": "Central Coast, California",
               "url": "http://www.longoriawine.com/"
            }
         },
         {
            "composition": [
               {
                  "percentage": 73,
                  "varietal": "Syrah"
               },
               {
                  "percentage": 73,
                  "varietal": "Syrah"
               }
            ],
            "description": "Red wine blend with an emphasis on the Cabernet Franc grape and including other Bordeaux grape varietals and some Syrah",
            "name": "Blue\'s Cuvee",
            "rating": 2,
            "vintage": 2005,
            "winery": {
               "country": "USA",
               "name": "Longoria",
               "region": "Central Coast, California",
               "url": "http://www.longoriawine.com/"
            }
         },
         {
            "composition": [
               {
                  "percentage": 73,
                  "varietal": "Syrah"
               },
               {
                  "percentage": 73,
                  "varietal": "Syrah"
               }
            ],
            "description": "Red wine blend with an emphasis on the Cabernet Franc grape and including other Bordeaux grape varietals and some Syrah",
            "name": "Blue\'s Cuvee",
            "rating": 2,
            "vintage": 2005,
            "winery": {
               "country": "USA",
               "name": "Longoria",
               "region": "Central Coast, California",
               "url": "http://www.longoriawine.com/"
            }
         },
         {
            "composition": [
               {
                  "percentage": 73,
                  "varietal": "Syrah"
               },
               {
                  "percentage": 73,
                  "varietal": "Syrah"
               }
            ],
            "description": "Red wine blend with an emphasis on the Cabernet Franc grape and including other Bordeaux grape varietals and some Syrah",
            "name": "Blue\'s Cuvee",
            "rating": 2,
            "vintage": 2005,
            "winery": {
               "country": "USA",
               "name": "Longoria",
               "region": "Central Coast, California",
               "url": "http://www.longoriawine.com/"
            }
         }
      ],
      "ids": [
         "Eos dolore ipsum eius voluptatem est.",
         "Laudantium corrupti et.",
         "Odit modi."
      ]
   }'`)
}
