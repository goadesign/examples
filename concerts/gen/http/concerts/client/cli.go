// Code generated by goa v3.21.5, DO NOT EDIT.
//
// concerts HTTP client CLI support package
//
// Command:
// $ goa gen goa.design/examples/concerts/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"
	"unicode/utf8"

	concerts "goa.design/examples/concerts/gen/concerts"
	goa "goa.design/goa/v3/pkg"
)

// BuildListPayload builds the payload for the concerts list endpoint from CLI
// flags.
func BuildListPayload(concertsListPage string, concertsListLimit string) (*concerts.ListPayload, error) {
	var err error
	var page int
	{
		if concertsListPage != "" {
			var v int64
			v, err = strconv.ParseInt(concertsListPage, 10, strconv.IntSize)
			page = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for page, must be INT")
			}
			if page < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("page", page, 1, true))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var limit int
	{
		if concertsListLimit != "" {
			var v int64
			v, err = strconv.ParseInt(concertsListLimit, 10, strconv.IntSize)
			limit = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for limit, must be INT")
			}
			if limit < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 1, true))
			}
			if limit > 100 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 100, false))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &concerts.ListPayload{}
	v.Page = page
	v.Limit = limit

	return v, nil
}

// BuildCreatePayload builds the payload for the concerts create endpoint from
// CLI flags.
func BuildCreatePayload(concertsCreateBody string) (*concerts.ConcertPayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(concertsCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"artist\": \"The White Stripes\",\n      \"date\": \"2024-12-25\",\n      \"price\": 7500,\n      \"venue\": \"Madison Square Garden, New York, NY\"\n   }'")
		}
		if utf8.RuneCountInString(body.Artist) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist", body.Artist, utf8.RuneCountInString(body.Artist), 1, true))
		}
		if utf8.RuneCountInString(body.Artist) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist", body.Artist, utf8.RuneCountInString(body.Artist), 200, false))
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.date", body.Date, goa.FormatDate))
		if utf8.RuneCountInString(body.Venue) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.venue", body.Venue, utf8.RuneCountInString(body.Venue), 1, true))
		}
		if utf8.RuneCountInString(body.Venue) > 300 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.venue", body.Venue, utf8.RuneCountInString(body.Venue), 300, false))
		}
		if body.Price < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.price", body.Price, 0, true))
		}
		if body.Price > 100000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.price", body.Price, 100000, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &concerts.ConcertPayload{
		Artist: body.Artist,
		Date:   body.Date,
		Venue:  body.Venue,
		Price:  body.Price,
	}

	return v, nil
}

// BuildShowPayload builds the payload for the concerts show endpoint from CLI
// flags.
func BuildShowPayload(concertsShowConcertID string) (*concerts.ShowPayload, error) {
	var err error
	var concertID string
	{
		concertID = concertsShowConcertID
		err = goa.MergeErrors(err, goa.ValidateFormat("concertID", concertID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &concerts.ShowPayload{}
	v.ConcertID = concertID

	return v, nil
}

// BuildUpdatePayload builds the payload for the concerts update endpoint from
// CLI flags.
func BuildUpdatePayload(concertsUpdateBody string, concertsUpdateConcertID string) (*concerts.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(concertsUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"artist\": \"The White Stripes\",\n      \"date\": \"2024-12-25\",\n      \"price\": 7500,\n      \"venue\": \"Madison Square Garden, New York, NY\"\n   }'")
		}
		if body.Artist != nil {
			if utf8.RuneCountInString(*body.Artist) < 1 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist", *body.Artist, utf8.RuneCountInString(*body.Artist), 1, true))
			}
		}
		if body.Artist != nil {
			if utf8.RuneCountInString(*body.Artist) > 200 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist", *body.Artist, utf8.RuneCountInString(*body.Artist), 200, false))
			}
		}
		if body.Date != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.date", *body.Date, goa.FormatDate))
		}
		if body.Venue != nil {
			if utf8.RuneCountInString(*body.Venue) < 1 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.venue", *body.Venue, utf8.RuneCountInString(*body.Venue), 1, true))
			}
		}
		if body.Venue != nil {
			if utf8.RuneCountInString(*body.Venue) > 300 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.venue", *body.Venue, utf8.RuneCountInString(*body.Venue), 300, false))
			}
		}
		if body.Price != nil {
			if *body.Price < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("body.price", *body.Price, 0, true))
			}
		}
		if body.Price != nil {
			if *body.Price > 100000 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("body.price", *body.Price, 100000, false))
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var concertID string
	{
		concertID = concertsUpdateConcertID
		err = goa.MergeErrors(err, goa.ValidateFormat("concertID", concertID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &concerts.UpdatePayload{
		Artist: body.Artist,
		Date:   body.Date,
		Venue:  body.Venue,
		Price:  body.Price,
	}
	v.ConcertID = concertID

	return v, nil
}

// BuildDeletePayload builds the payload for the concerts delete endpoint from
// CLI flags.
func BuildDeletePayload(concertsDeleteConcertID string) (*concerts.DeletePayload, error) {
	var err error
	var concertID string
	{
		concertID = concertsDeleteConcertID
		err = goa.MergeErrors(err, goa.ValidateFormat("concertID", concertID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &concerts.DeletePayload{}
	v.ConcertID = concertID

	return v, nil
}
