// Code generated by goa v3.22.2, DO NOT EDIT.
//
// concerts HTTP client types
//
// Command:
// $ goa gen goa.design/examples/concerts/design

package client

import (
	"unicode/utf8"

	concerts "goa.design/examples/concerts/gen/concerts"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "concerts" service "create" endpoint
// HTTP request body.
type CreateRequestBody struct {
	// The main performer for this concert
	Artist string `form:"artist" json:"artist" xml:"artist"`
	// The date when the concert will take place
	Date string `form:"date" json:"date" xml:"date"`
	// The venue where the concert will be held
	Venue string `form:"venue" json:"venue" xml:"venue"`
	// Base ticket price in cents (e.g., 7500 = $75.00)
	Price int `form:"price" json:"price" xml:"price"`
}

// UpdateRequestBody is the type of the "concerts" service "update" endpoint
// HTTP request body.
type UpdateRequestBody struct {
	// The main performer for this concert
	Artist *string `form:"artist,omitempty" json:"artist,omitempty" xml:"artist,omitempty"`
	// The date when the concert will take place
	Date *string `form:"date,omitempty" json:"date,omitempty" xml:"date,omitempty"`
	// The venue where the concert will be held
	Venue *string `form:"venue,omitempty" json:"venue,omitempty" xml:"venue,omitempty"`
	// Base ticket price in cents (e.g., 7500 = $75.00)
	Price *int `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
}

// ListResponseBody is the type of the "concerts" service "list" endpoint HTTP
// response body.
type ListResponseBody []*ConcertResponse

// CreateResponseBody is the type of the "concerts" service "create" endpoint
// HTTP response body.
type CreateResponseBody struct {
	// System-generated unique identifier
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The main performer for this concert
	Artist *string `form:"artist,omitempty" json:"artist,omitempty" xml:"artist,omitempty"`
	// The date when the concert will take place
	Date *string `form:"date,omitempty" json:"date,omitempty" xml:"date,omitempty"`
	// The venue where the concert will be held
	Venue *string `form:"venue,omitempty" json:"venue,omitempty" xml:"venue,omitempty"`
	// Base ticket price in cents (e.g., 7500 = $75.00)
	Price *int `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
}

// ShowResponseBody is the type of the "concerts" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// System-generated unique identifier
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The main performer for this concert
	Artist *string `form:"artist,omitempty" json:"artist,omitempty" xml:"artist,omitempty"`
	// The date when the concert will take place
	Date *string `form:"date,omitempty" json:"date,omitempty" xml:"date,omitempty"`
	// The venue where the concert will be held
	Venue *string `form:"venue,omitempty" json:"venue,omitempty" xml:"venue,omitempty"`
	// Base ticket price in cents (e.g., 7500 = $75.00)
	Price *int `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
}

// UpdateResponseBody is the type of the "concerts" service "update" endpoint
// HTTP response body.
type UpdateResponseBody struct {
	// System-generated unique identifier
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The main performer for this concert
	Artist *string `form:"artist,omitempty" json:"artist,omitempty" xml:"artist,omitempty"`
	// The date when the concert will take place
	Date *string `form:"date,omitempty" json:"date,omitempty" xml:"date,omitempty"`
	// The venue where the concert will be held
	Venue *string `form:"venue,omitempty" json:"venue,omitempty" xml:"venue,omitempty"`
	// Base ticket price in cents (e.g., 7500 = $75.00)
	Price *int `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
}

// CreateBadRequestResponseBody is the type of the "concerts" service "create"
// endpoint HTTP response body for the "bad_request" error.
type CreateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowNotFoundResponseBody is the type of the "concerts" service "show"
// endpoint HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateNotFoundResponseBody is the type of the "concerts" service "update"
// endpoint HTTP response body for the "not_found" error.
type UpdateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateBadRequestResponseBody is the type of the "concerts" service "update"
// endpoint HTTP response body for the "bad_request" error.
type UpdateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteNotFoundResponseBody is the type of the "concerts" service "delete"
// endpoint HTTP response body for the "not_found" error.
type DeleteNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ConcertResponse is used to define fields on response body types.
type ConcertResponse struct {
	// System-generated unique identifier
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The main performer for this concert
	Artist *string `form:"artist,omitempty" json:"artist,omitempty" xml:"artist,omitempty"`
	// The date when the concert will take place
	Date *string `form:"date,omitempty" json:"date,omitempty" xml:"date,omitempty"`
	// The venue where the concert will be held
	Venue *string `form:"venue,omitempty" json:"venue,omitempty" xml:"venue,omitempty"`
	// Base ticket price in cents (e.g., 7500 = $75.00)
	Price *int `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "concerts" service.
func NewCreateRequestBody(p *concerts.ConcertPayload) *CreateRequestBody {
	body := &CreateRequestBody{
		Artist: p.Artist,
		Date:   p.Date,
		Venue:  p.Venue,
		Price:  p.Price,
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "concerts" service.
func NewUpdateRequestBody(p *concerts.UpdatePayload) *UpdateRequestBody {
	body := &UpdateRequestBody{
		Artist: p.Artist,
		Date:   p.Date,
		Venue:  p.Venue,
		Price:  p.Price,
	}
	return body
}

// NewListConcertOK builds a "concerts" service "list" endpoint result from a
// HTTP "OK" response.
func NewListConcertOK(body []*ConcertResponse) []*concerts.Concert {
	v := make([]*concerts.Concert, len(body))
	for i, val := range body {
		v[i] = unmarshalConcertResponseToConcertsConcert(val)
	}

	return v
}

// NewCreateConcertCreated builds a "concerts" service "create" endpoint result
// from a HTTP "Created" response.
func NewCreateConcertCreated(body *CreateResponseBody) *concerts.Concert {
	v := &concerts.Concert{
		ID:     *body.ID,
		Artist: *body.Artist,
		Date:   *body.Date,
		Venue:  *body.Venue,
		Price:  *body.Price,
	}

	return v
}

// NewCreateBadRequest builds a concerts service create endpoint bad_request
// error.
func NewCreateBadRequest(body *CreateBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowConcertOK builds a "concerts" service "show" endpoint result from a
// HTTP "OK" response.
func NewShowConcertOK(body *ShowResponseBody) *concerts.Concert {
	v := &concerts.Concert{
		ID:     *body.ID,
		Artist: *body.Artist,
		Date:   *body.Date,
		Venue:  *body.Venue,
		Price:  *body.Price,
	}

	return v
}

// NewShowNotFound builds a concerts service show endpoint not_found error.
func NewShowNotFound(body *ShowNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateConcertOK builds a "concerts" service "update" endpoint result from
// a HTTP "OK" response.
func NewUpdateConcertOK(body *UpdateResponseBody) *concerts.Concert {
	v := &concerts.Concert{
		ID:     *body.ID,
		Artist: *body.Artist,
		Date:   *body.Date,
		Venue:  *body.Venue,
		Price:  *body.Price,
	}

	return v
}

// NewUpdateNotFound builds a concerts service update endpoint not_found error.
func NewUpdateNotFound(body *UpdateNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateBadRequest builds a concerts service update endpoint bad_request
// error.
func NewUpdateBadRequest(body *UpdateBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteNotFound builds a concerts service delete endpoint not_found error.
func NewDeleteNotFound(body *DeleteNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateCreateResponseBody runs the validations defined on CreateResponseBody
func ValidateCreateResponseBody(body *CreateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Artist == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("artist", "body"))
	}
	if body.Date == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("date", "body"))
	}
	if body.Venue == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("venue", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.Artist != nil {
		if utf8.RuneCountInString(*body.Artist) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist", *body.Artist, utf8.RuneCountInString(*body.Artist), 1, true))
		}
	}
	if body.Artist != nil {
		if utf8.RuneCountInString(*body.Artist) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist", *body.Artist, utf8.RuneCountInString(*body.Artist), 200, false))
		}
	}
	if body.Date != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.date", *body.Date, goa.FormatDate))
	}
	if body.Venue != nil {
		if utf8.RuneCountInString(*body.Venue) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.venue", *body.Venue, utf8.RuneCountInString(*body.Venue), 1, true))
		}
	}
	if body.Venue != nil {
		if utf8.RuneCountInString(*body.Venue) > 300 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.venue", *body.Venue, utf8.RuneCountInString(*body.Venue), 300, false))
		}
	}
	if body.Price != nil {
		if *body.Price < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.price", *body.Price, 0, true))
		}
	}
	if body.Price != nil {
		if *body.Price > 100000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.price", *body.Price, 100000, false))
		}
	}
	return
}

// ValidateShowResponseBody runs the validations defined on ShowResponseBody
func ValidateShowResponseBody(body *ShowResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Artist == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("artist", "body"))
	}
	if body.Date == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("date", "body"))
	}
	if body.Venue == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("venue", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.Artist != nil {
		if utf8.RuneCountInString(*body.Artist) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist", *body.Artist, utf8.RuneCountInString(*body.Artist), 1, true))
		}
	}
	if body.Artist != nil {
		if utf8.RuneCountInString(*body.Artist) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist", *body.Artist, utf8.RuneCountInString(*body.Artist), 200, false))
		}
	}
	if body.Date != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.date", *body.Date, goa.FormatDate))
	}
	if body.Venue != nil {
		if utf8.RuneCountInString(*body.Venue) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.venue", *body.Venue, utf8.RuneCountInString(*body.Venue), 1, true))
		}
	}
	if body.Venue != nil {
		if utf8.RuneCountInString(*body.Venue) > 300 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.venue", *body.Venue, utf8.RuneCountInString(*body.Venue), 300, false))
		}
	}
	if body.Price != nil {
		if *body.Price < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.price", *body.Price, 0, true))
		}
	}
	if body.Price != nil {
		if *body.Price > 100000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.price", *body.Price, 100000, false))
		}
	}
	return
}

// ValidateUpdateResponseBody runs the validations defined on UpdateResponseBody
func ValidateUpdateResponseBody(body *UpdateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Artist == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("artist", "body"))
	}
	if body.Date == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("date", "body"))
	}
	if body.Venue == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("venue", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.Artist != nil {
		if utf8.RuneCountInString(*body.Artist) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist", *body.Artist, utf8.RuneCountInString(*body.Artist), 1, true))
		}
	}
	if body.Artist != nil {
		if utf8.RuneCountInString(*body.Artist) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist", *body.Artist, utf8.RuneCountInString(*body.Artist), 200, false))
		}
	}
	if body.Date != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.date", *body.Date, goa.FormatDate))
	}
	if body.Venue != nil {
		if utf8.RuneCountInString(*body.Venue) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.venue", *body.Venue, utf8.RuneCountInString(*body.Venue), 1, true))
		}
	}
	if body.Venue != nil {
		if utf8.RuneCountInString(*body.Venue) > 300 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.venue", *body.Venue, utf8.RuneCountInString(*body.Venue), 300, false))
		}
	}
	if body.Price != nil {
		if *body.Price < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.price", *body.Price, 0, true))
		}
	}
	if body.Price != nil {
		if *body.Price > 100000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.price", *body.Price, 100000, false))
		}
	}
	return
}

// ValidateCreateBadRequestResponseBody runs the validations defined on
// create_bad_request_response_body
func ValidateCreateBadRequestResponseBody(body *CreateBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowNotFoundResponseBody runs the validations defined on
// show_not_found_response_body
func ValidateShowNotFoundResponseBody(body *ShowNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateNotFoundResponseBody runs the validations defined on
// update_not_found_response_body
func ValidateUpdateNotFoundResponseBody(body *UpdateNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateBadRequestResponseBody runs the validations defined on
// update_bad_request_response_body
func ValidateUpdateBadRequestResponseBody(body *UpdateBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteNotFoundResponseBody runs the validations defined on
// delete_not_found_response_body
func ValidateDeleteNotFoundResponseBody(body *DeleteNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateConcertResponse runs the validations defined on ConcertResponse
func ValidateConcertResponse(body *ConcertResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Artist == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("artist", "body"))
	}
	if body.Date == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("date", "body"))
	}
	if body.Venue == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("venue", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.Artist != nil {
		if utf8.RuneCountInString(*body.Artist) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist", *body.Artist, utf8.RuneCountInString(*body.Artist), 1, true))
		}
	}
	if body.Artist != nil {
		if utf8.RuneCountInString(*body.Artist) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist", *body.Artist, utf8.RuneCountInString(*body.Artist), 200, false))
		}
	}
	if body.Date != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.date", *body.Date, goa.FormatDate))
	}
	if body.Venue != nil {
		if utf8.RuneCountInString(*body.Venue) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.venue", *body.Venue, utf8.RuneCountInString(*body.Venue), 1, true))
		}
	}
	if body.Venue != nil {
		if utf8.RuneCountInString(*body.Venue) > 300 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.venue", *body.Venue, utf8.RuneCountInString(*body.Venue), 300, false))
		}
	}
	if body.Price != nil {
		if *body.Price < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.price", *body.Price, 0, true))
		}
	}
	if body.Price != nil {
		if *body.Price > 100000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.price", *body.Price, 100000, false))
		}
	}
	return
}
