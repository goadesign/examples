// Code generated by goa v3.22.1, DO NOT EDIT.
//
// concerts HTTP server types
//
// Command:
// $ goa gen goa.design/examples/concerts/design

package server

import (
	"unicode/utf8"

	concerts "goa.design/examples/concerts/gen/concerts"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "concerts" service "create" endpoint
// HTTP request body.
type CreateRequestBody struct {
	// The main performer for this concert
	Artist *string `form:"artist,omitempty" json:"artist,omitempty" xml:"artist,omitempty"`
	// The date when the concert will take place
	Date *string `form:"date,omitempty" json:"date,omitempty" xml:"date,omitempty"`
	// The venue where the concert will be held
	Venue *string `form:"venue,omitempty" json:"venue,omitempty" xml:"venue,omitempty"`
	// Base ticket price in cents (e.g., 7500 = $75.00)
	Price *int `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
}

// UpdateRequestBody is the type of the "concerts" service "update" endpoint
// HTTP request body.
type UpdateRequestBody struct {
	// The main performer for this concert
	Artist *string `form:"artist,omitempty" json:"artist,omitempty" xml:"artist,omitempty"`
	// The date when the concert will take place
	Date *string `form:"date,omitempty" json:"date,omitempty" xml:"date,omitempty"`
	// The venue where the concert will be held
	Venue *string `form:"venue,omitempty" json:"venue,omitempty" xml:"venue,omitempty"`
	// Base ticket price in cents (e.g., 7500 = $75.00)
	Price *int `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
}

// ListResponseBody is the type of the "concerts" service "list" endpoint HTTP
// response body.
type ListResponseBody []*ConcertResponse

// CreateResponseBody is the type of the "concerts" service "create" endpoint
// HTTP response body.
type CreateResponseBody struct {
	// System-generated unique identifier
	ID string `form:"id" json:"id" xml:"id"`
	// The main performer for this concert
	Artist string `form:"artist" json:"artist" xml:"artist"`
	// The date when the concert will take place
	Date string `form:"date" json:"date" xml:"date"`
	// The venue where the concert will be held
	Venue string `form:"venue" json:"venue" xml:"venue"`
	// Base ticket price in cents (e.g., 7500 = $75.00)
	Price int `form:"price" json:"price" xml:"price"`
}

// ShowResponseBody is the type of the "concerts" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// System-generated unique identifier
	ID string `form:"id" json:"id" xml:"id"`
	// The main performer for this concert
	Artist string `form:"artist" json:"artist" xml:"artist"`
	// The date when the concert will take place
	Date string `form:"date" json:"date" xml:"date"`
	// The venue where the concert will be held
	Venue string `form:"venue" json:"venue" xml:"venue"`
	// Base ticket price in cents (e.g., 7500 = $75.00)
	Price int `form:"price" json:"price" xml:"price"`
}

// UpdateResponseBody is the type of the "concerts" service "update" endpoint
// HTTP response body.
type UpdateResponseBody struct {
	// System-generated unique identifier
	ID string `form:"id" json:"id" xml:"id"`
	// The main performer for this concert
	Artist string `form:"artist" json:"artist" xml:"artist"`
	// The date when the concert will take place
	Date string `form:"date" json:"date" xml:"date"`
	// The venue where the concert will be held
	Venue string `form:"venue" json:"venue" xml:"venue"`
	// Base ticket price in cents (e.g., 7500 = $75.00)
	Price int `form:"price" json:"price" xml:"price"`
}

// CreateBadRequestResponseBody is the type of the "concerts" service "create"
// endpoint HTTP response body for the "bad_request" error.
type CreateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowNotFoundResponseBody is the type of the "concerts" service "show"
// endpoint HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateNotFoundResponseBody is the type of the "concerts" service "update"
// endpoint HTTP response body for the "not_found" error.
type UpdateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateBadRequestResponseBody is the type of the "concerts" service "update"
// endpoint HTTP response body for the "bad_request" error.
type UpdateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteNotFoundResponseBody is the type of the "concerts" service "delete"
// endpoint HTTP response body for the "not_found" error.
type DeleteNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ConcertResponse is used to define fields on response body types.
type ConcertResponse struct {
	// System-generated unique identifier
	ID string `form:"id" json:"id" xml:"id"`
	// The main performer for this concert
	Artist string `form:"artist" json:"artist" xml:"artist"`
	// The date when the concert will take place
	Date string `form:"date" json:"date" xml:"date"`
	// The venue where the concert will be held
	Venue string `form:"venue" json:"venue" xml:"venue"`
	// Base ticket price in cents (e.g., 7500 = $75.00)
	Price int `form:"price" json:"price" xml:"price"`
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "concerts" service.
func NewListResponseBody(res []*concerts.Concert) ListResponseBody {
	body := make([]*ConcertResponse, len(res))
	for i, val := range res {
		body[i] = marshalConcertsConcertToConcertResponse(val)
	}
	return body
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "concerts" service.
func NewCreateResponseBody(res *concerts.Concert) *CreateResponseBody {
	body := &CreateResponseBody{
		ID:     res.ID,
		Artist: res.Artist,
		Date:   res.Date,
		Venue:  res.Venue,
		Price:  res.Price,
	}
	return body
}

// NewShowResponseBody builds the HTTP response body from the result of the
// "show" endpoint of the "concerts" service.
func NewShowResponseBody(res *concerts.Concert) *ShowResponseBody {
	body := &ShowResponseBody{
		ID:     res.ID,
		Artist: res.Artist,
		Date:   res.Date,
		Venue:  res.Venue,
		Price:  res.Price,
	}
	return body
}

// NewUpdateResponseBody builds the HTTP response body from the result of the
// "update" endpoint of the "concerts" service.
func NewUpdateResponseBody(res *concerts.Concert) *UpdateResponseBody {
	body := &UpdateResponseBody{
		ID:     res.ID,
		Artist: res.Artist,
		Date:   res.Date,
		Venue:  res.Venue,
		Price:  res.Price,
	}
	return body
}

// NewCreateBadRequestResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "concerts" service.
func NewCreateBadRequestResponseBody(res *goa.ServiceError) *CreateBadRequestResponseBody {
	body := &CreateBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowNotFoundResponseBody builds the HTTP response body from the result of
// the "show" endpoint of the "concerts" service.
func NewShowNotFoundResponseBody(res *goa.ServiceError) *ShowNotFoundResponseBody {
	body := &ShowNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateNotFoundResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "concerts" service.
func NewUpdateNotFoundResponseBody(res *goa.ServiceError) *UpdateNotFoundResponseBody {
	body := &UpdateNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateBadRequestResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "concerts" service.
func NewUpdateBadRequestResponseBody(res *goa.ServiceError) *UpdateBadRequestResponseBody {
	body := &UpdateBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteNotFoundResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "concerts" service.
func NewDeleteNotFoundResponseBody(res *goa.ServiceError) *DeleteNotFoundResponseBody {
	body := &DeleteNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListPayload builds a concerts service list endpoint payload.
func NewListPayload(page int, limit int) *concerts.ListPayload {
	v := &concerts.ListPayload{}
	v.Page = page
	v.Limit = limit

	return v
}

// NewCreateConcertPayload builds a concerts service create endpoint payload.
func NewCreateConcertPayload(body *CreateRequestBody) *concerts.ConcertPayload {
	v := &concerts.ConcertPayload{
		Artist: *body.Artist,
		Date:   *body.Date,
		Venue:  *body.Venue,
		Price:  *body.Price,
	}

	return v
}

// NewShowPayload builds a concerts service show endpoint payload.
func NewShowPayload(concertID string) *concerts.ShowPayload {
	v := &concerts.ShowPayload{}
	v.ConcertID = concertID

	return v
}

// NewUpdatePayload builds a concerts service update endpoint payload.
func NewUpdatePayload(body *UpdateRequestBody, concertID string) *concerts.UpdatePayload {
	v := &concerts.UpdatePayload{
		Artist: body.Artist,
		Date:   body.Date,
		Venue:  body.Venue,
		Price:  body.Price,
	}
	v.ConcertID = concertID

	return v
}

// NewDeletePayload builds a concerts service delete endpoint payload.
func NewDeletePayload(concertID string) *concerts.DeletePayload {
	v := &concerts.DeletePayload{}
	v.ConcertID = concertID

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Artist == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("artist", "body"))
	}
	if body.Date == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("date", "body"))
	}
	if body.Venue == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("venue", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.Artist != nil {
		if utf8.RuneCountInString(*body.Artist) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist", *body.Artist, utf8.RuneCountInString(*body.Artist), 1, true))
		}
	}
	if body.Artist != nil {
		if utf8.RuneCountInString(*body.Artist) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist", *body.Artist, utf8.RuneCountInString(*body.Artist), 200, false))
		}
	}
	if body.Date != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.date", *body.Date, goa.FormatDate))
	}
	if body.Venue != nil {
		if utf8.RuneCountInString(*body.Venue) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.venue", *body.Venue, utf8.RuneCountInString(*body.Venue), 1, true))
		}
	}
	if body.Venue != nil {
		if utf8.RuneCountInString(*body.Venue) > 300 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.venue", *body.Venue, utf8.RuneCountInString(*body.Venue), 300, false))
		}
	}
	if body.Price != nil {
		if *body.Price < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.price", *body.Price, 0, true))
		}
	}
	if body.Price != nil {
		if *body.Price > 100000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.price", *body.Price, 100000, false))
		}
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.Artist != nil {
		if utf8.RuneCountInString(*body.Artist) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist", *body.Artist, utf8.RuneCountInString(*body.Artist), 1, true))
		}
	}
	if body.Artist != nil {
		if utf8.RuneCountInString(*body.Artist) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist", *body.Artist, utf8.RuneCountInString(*body.Artist), 200, false))
		}
	}
	if body.Date != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.date", *body.Date, goa.FormatDate))
	}
	if body.Venue != nil {
		if utf8.RuneCountInString(*body.Venue) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.venue", *body.Venue, utf8.RuneCountInString(*body.Venue), 1, true))
		}
	}
	if body.Venue != nil {
		if utf8.RuneCountInString(*body.Venue) > 300 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.venue", *body.Venue, utf8.RuneCountInString(*body.Venue), 300, false))
		}
	}
	if body.Price != nil {
		if *body.Price < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.price", *body.Price, 0, true))
		}
	}
	if body.Price != nil {
		if *body.Price > 100000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.price", *body.Price, 100000, false))
		}
	}
	return
}
