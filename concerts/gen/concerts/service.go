// Code generated by goa v3.21.4, DO NOT EDIT.
//
// concerts service
//
// Command:
// $ goa gen goa.design/examples/concerts/design

package concerts

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// The concerts service manages music concert data. It provides CRUD operations
// for concert information including artist details, venues, dates, and pricing.
type Service interface {
	// List concerts with optional pagination. Returns an array of concerts sorted
	// by date.
	List(context.Context, *ListPayload) (res []*Concert, err error)
	// Create a new concert entry. All fields are required to ensure complete
	// concert information.
	Create(context.Context, *ConcertPayload) (res *Concert, err error)
	// Get a single concert by its unique ID.
	Show(context.Context, *ShowPayload) (res *Concert, err error)
	// Update an existing concert by ID. Only provided fields will be updated.
	Update(context.Context, *UpdatePayload) (res *Concert, err error)
	// Remove a concert from the system by ID. This operation cannot be undone.
	Delete(context.Context, *DeletePayload) (err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "concerts"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "concerts"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"list", "create", "show", "update", "delete"}

// The newly created concert
type Concert struct {
	// System-generated unique identifier
	ID string
	// The main performer for this concert
	Artist string
	// The date when the concert will take place
	Date string
	// The venue where the concert will be held
	Venue string
	// Base ticket price in cents (e.g., 7500 = $75.00)
	Price int
}

// Concert information to create
type ConcertPayload struct {
	// The main performer for this concert
	Artist string
	// The date when the concert will take place
	Date string
	// The venue where the concert will be held
	Venue string
	// Base ticket price in cents (e.g., 7500 = $75.00)
	Price int
}

// DeletePayload is the payload type of the concerts service delete method.
type DeletePayload struct {
	// ID of the concert to remove
	ConcertID string
}

// ListPayload is the payload type of the concerts service list method.
type ListPayload struct {
	// Must be 1 or greater
	Page int
	// Must be between 1 and 100
	Limit int
}

// ShowPayload is the payload type of the concerts service show method.
type ShowPayload struct {
	// Unique concert identifier
	ConcertID string
}

// UpdatePayload is the payload type of the concerts service update method.
type UpdatePayload struct {
	// ID of the concert to update
	ConcertID string
	// The main performer for this concert
	Artist *string
	// The date when the concert will take place
	Date *string
	// The venue where the concert will be held
	Venue *string
	// Base ticket price in cents (e.g., 7500 = $75.00)
	Price *int
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "bad_request", false, false, false)
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}
