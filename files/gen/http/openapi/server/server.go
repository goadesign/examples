// Code generated by goa v3.20.0, DO NOT EDIT.
//
// openapi HTTP server
//
// Command:
// $ goa gen goa.design/examples/files/design

package server

import (
	"context"
	"net/http"
	"path"

	openapi "goa.design/examples/files/gen/openapi"
	goahttp "goa.design/goa/v3/http"
)

// Server lists the openapi service endpoint HTTP handlers.
type Server struct {
	Mounts              []*MountPoint
	GenHTTPOpenapiJSON  http.Handler
	GenHTTPOpenapiYaml  http.Handler
	GenHTTPOpenapi3JSON http.Handler
	GenHTTPOpenapi3Yaml http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the openapi service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *openapi.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
	fileSystemGenHTTPOpenapiJSON http.FileSystem,
	fileSystemGenHTTPOpenapiYaml http.FileSystem,
	fileSystemGenHTTPOpenapi3JSON http.FileSystem,
	fileSystemGenHTTPOpenapi3Yaml http.FileSystem,
) *Server {
	if fileSystemGenHTTPOpenapiJSON == nil {
		fileSystemGenHTTPOpenapiJSON = http.Dir(".")
	}
	fileSystemGenHTTPOpenapiJSON = appendPrefix(fileSystemGenHTTPOpenapiJSON, "/gen/http")
	if fileSystemGenHTTPOpenapiYaml == nil {
		fileSystemGenHTTPOpenapiYaml = http.Dir(".")
	}
	fileSystemGenHTTPOpenapiYaml = appendPrefix(fileSystemGenHTTPOpenapiYaml, "/gen/http")
	if fileSystemGenHTTPOpenapi3JSON == nil {
		fileSystemGenHTTPOpenapi3JSON = http.Dir(".")
	}
	fileSystemGenHTTPOpenapi3JSON = appendPrefix(fileSystemGenHTTPOpenapi3JSON, "/gen/http")
	if fileSystemGenHTTPOpenapi3Yaml == nil {
		fileSystemGenHTTPOpenapi3Yaml = http.Dir(".")
	}
	fileSystemGenHTTPOpenapi3Yaml = appendPrefix(fileSystemGenHTTPOpenapi3Yaml, "/gen/http")
	return &Server{
		Mounts: []*MountPoint{
			{"Serve gen/http/openapi.json", "GET", "/openapi.json"},
			{"Serve gen/http/openapi.yaml", "GET", "/openapi.yaml"},
			{"Serve gen/http/openapi3.json", "GET", "/openapi3.json"},
			{"Serve gen/http/openapi3.yaml", "GET", "/openapi3.yaml"},
		},
		GenHTTPOpenapiJSON:  http.FileServer(fileSystemGenHTTPOpenapiJSON),
		GenHTTPOpenapiYaml:  http.FileServer(fileSystemGenHTTPOpenapiYaml),
		GenHTTPOpenapi3JSON: http.FileServer(fileSystemGenHTTPOpenapi3JSON),
		GenHTTPOpenapi3Yaml: http.FileServer(fileSystemGenHTTPOpenapi3Yaml),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "openapi" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return openapi.MethodNames[:] }

// Mount configures the mux to serve the openapi endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountGenHTTPOpenapiJSON(mux, h.GenHTTPOpenapiJSON)
	MountGenHTTPOpenapiYaml(mux, h.GenHTTPOpenapiYaml)
	MountGenHTTPOpenapi3JSON(mux, h.GenHTTPOpenapi3JSON)
	MountGenHTTPOpenapi3Yaml(mux, h.GenHTTPOpenapi3Yaml)
}

// Mount configures the mux to serve the openapi endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// appendFS is a custom implementation of fs.FS that appends a specified prefix
// to the file paths before delegating the Open call to the underlying fs.FS.
type appendFS struct {
	prefix string
	fs     http.FileSystem
}

// Open opens the named file, appending the prefix to the file path before
// passing it to the underlying fs.FS.
func (s appendFS) Open(name string) (http.File, error) {
	switch name {
	}
	return s.fs.Open(path.Join(s.prefix, name))
}

// appendPrefix returns a new fs.FS that appends the specified prefix to file paths
// before delegating to the provided embed.FS.
func appendPrefix(fsys http.FileSystem, prefix string) http.FileSystem {
	return appendFS{prefix: prefix, fs: fsys}
}

// MountGenHTTPOpenapiJSON configures the mux to serve GET request made to
// "/openapi.json".
func MountGenHTTPOpenapiJSON(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/openapi.json", h.ServeHTTP)
}

// MountGenHTTPOpenapiYaml configures the mux to serve GET request made to
// "/openapi.yaml".
func MountGenHTTPOpenapiYaml(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/openapi.yaml", h.ServeHTTP)
}

// MountGenHTTPOpenapi3JSON configures the mux to serve GET request made to
// "/openapi3.json".
func MountGenHTTPOpenapi3JSON(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/openapi3.json", h.ServeHTTP)
}

// MountGenHTTPOpenapi3Yaml configures the mux to serve GET request made to
// "/openapi3.yaml".
func MountGenHTTPOpenapi3Yaml(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/openapi3.yaml", h.ServeHTTP)
}
