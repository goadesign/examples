{"openapi":"3.0.3","info":{"title":"Goa API","description":"Simple file upload and download example.","version":"1.0"},"servers":[{"url":"http://localhost:80","description":"Default server for upload_download"}],"paths":{"/download/{filename}":{"get":{"tags":["updown"],"summary":"download updown","operationId":"updown#download","parameters":[{"name":"filename","in":"path","description":"Path to downloaded file.","required":true,"schema":{"type":"string","description":"Path to downloaded file.","example":"Autem aliquam."},"example":"Itaque necessitatibus."}],"responses":{"200":{"description":"OK response.","headers":{"Content-Length":{"description":"Length is the downloaded content length in bytes.","required":true,"schema":{"type":"integer","description":"Length is the downloaded content length in bytes.","example":4194304,"format":"int64"},"example":4194304}}},"404":{"description":"invalid_file_path: Could not locate file for download","content":{"application/vnd.goa.error":{"schema":{"$ref":"#/components/schemas/Error"}}}},"500":{"description":"internal_error: Fault while processing download.","content":{"application/vnd.goa.error":{"schema":{"$ref":"#/components/schemas/Error"}}}}}}},"/upload/{dir}":{"post":{"tags":["updown"],"summary":"upload updown","operationId":"updown#upload","parameters":[{"name":"dir","in":"path","description":"Dir is the relative path to the file directory where the uploaded content is saved.","required":true,"schema":{"type":"string","description":"Dir is the relative path to the file directory where the uploaded content is saved.","default":"upload","example":"upload"},"example":"upload"},{"name":"Content-Type","in":"header","description":"Content-Type header, must define value for multipart boundary.","allowEmptyValue":true,"schema":{"type":"string","description":"Content-Type header, must define value for multipart boundary.","default":"multipart/form-data; boundary=goa","example":"multipart/form-data; boundary=goa","pattern":"multipart/[^;]+; boundary=.+"},"example":"multipart/form-data; boundary=goa"}],"responses":{"204":{"description":"No Content response."},"400":{"description":"invalid_multipart_request: Error returned when the request body is not a valid multipart content.","content":{"application/vnd.goa.error":{"schema":{"$ref":"#/components/schemas/Error"}}}},"500":{"description":"internal_error: Fault while processing upload.","content":{"application/vnd.goa.error":{"schema":{"$ref":"#/components/schemas/Error"}}}}}}}},"components":{"schemas":{"Error":{"type":"object","properties":{"fault":{"type":"boolean","description":"Is the error a server-side fault?","example":false},"id":{"type":"string","description":"ID is a unique identifier for this particular occurrence of the problem.","example":"123abc"},"message":{"type":"string","description":"Message is a human-readable explanation specific to this occurrence of the problem.","example":"parameter 'p' must be an integer"},"name":{"type":"string","description":"Name is the name of this class of errors.","example":"bad_request"},"temporary":{"type":"boolean","description":"Is the error temporary?","example":false},"timeout":{"type":"boolean","description":"Is the error a timeout?","example":true}},"description":"Error returned when the Content-Type header does not define a multipart request.","example":{"id":"3F1FKVRR","message":"Value of ID must be an integer","name":"bad_request"},"required":["name","id","message","temporary","timeout","fault"]}}},"tags":[{"name":"updown","description":"Service updown demonstrates how to implement upload and download of files in\nGoa without having to load the entire content in memory first.\nThe upload method uses SkipRequestBodyEncodeDecode to delegate reading the HTTP\nrequest body to the service logic. This alleviates the need for loading the\nfull body content in memory first to decode it into a data structure. Note that\nusing SkipRequestBodyDecode is incompatible with gRPC and can only be used on\nmethods that only define a HTTP transport mapping. This example implementation\nleverages package \"mime/multipart\" to read the request body.\nSimilarly the download method uses SkipResponseBodyEncodeDecode to stream the \nfile to the client without requiring to load the complete content in memory\nfirst. As with SkipRequestBodyDecode using SkipResponseBodyEncodeDecode is\nincompatible with gRPC."}]}