// Code generated by goa v3.22.2, DO NOT EDIT.
//
// resume HTTP client CLI support package
//
// Command:
// $ goa gen goa.design/examples/multipart/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	resumec "goa.design/examples/multipart/gen/http/resume/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() []string {
	return []string{
		"resume (list|add)",
	}
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` resume list` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
	resumeAddEncoderFn resumec.ResumeAddEncoderFunc,
) (goa.Endpoint, any, error) {
	var (
		resumeFlags = flag.NewFlagSet("resume", flag.ContinueOnError)

		resumeListFlags = flag.NewFlagSet("list", flag.ExitOnError)

		resumeAddFlags    = flag.NewFlagSet("add", flag.ExitOnError)
		resumeAddBodyFlag = resumeAddFlags.String("body", "REQUIRED", "")
	)
	resumeFlags.Usage = resumeUsage
	resumeListFlags.Usage = resumeListUsage
	resumeAddFlags.Usage = resumeAddUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "resume":
			svcf = resumeFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "resume":
			switch epn {
			case "list":
				epf = resumeListFlags

			case "add":
				epf = resumeAddFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "resume":
			c := resumec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list":
				endpoint = c.List()
			case "add":
				endpoint = c.Add(resumeAddEncoderFn)
				data, err = resumec.BuildAddPayload(*resumeAddBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// resumeUsage displays the usage of the resume command and its subcommands.
func resumeUsage() {
	fmt.Fprintln(os.Stderr, `The storage service makes it possible to add resumes using multipart.`)
	fmt.Fprintf(os.Stderr, "Usage:\n    %s [globalflags] resume COMMAND [flags]\n\n", os.Args[0])
	fmt.Fprintln(os.Stderr, "COMMAND:")
	fmt.Fprintln(os.Stderr, `    list: List all stored resumes`)
	fmt.Fprintln(os.Stderr, `    add: Add n number of resumes and return their IDs. This is a multipart request and each part has field name 'resume' and contains the encoded resume to be added.`)
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Additional help:")
	fmt.Fprintf(os.Stderr, "    %s resume COMMAND --help\n", os.Args[0])
}
func resumeListUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] resume list", os.Args[0])
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `List all stored resumes`)

	// Flags list

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `resume list`)
}

func resumeAddUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] resume add", os.Args[0])
	fmt.Fprint(os.Stderr, " -body JSON")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Add n number of resumes and return their IDs. This is a multipart request and each part has field name 'resume' and contains the encoded resume to be added.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -body JSON: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `resume add --body '[
      {
         "education": [
            {
               "institution": "Ex sequi.",
               "major": "Autem voluptate."
            },
            {
               "institution": "Ex sequi.",
               "major": "Autem voluptate."
            },
            {
               "institution": "Ex sequi.",
               "major": "Autem voluptate."
            },
            {
               "institution": "Ex sequi.",
               "major": "Autem voluptate."
            }
         ],
         "experience": [
            {
               "company": "Cum maiores quo at ducimus sit.",
               "duration": 4539614019828256019,
               "role": "Eaque est nihil voluptate dolorem ut."
            },
            {
               "company": "Cum maiores quo at ducimus sit.",
               "duration": 4539614019828256019,
               "role": "Eaque est nihil voluptate dolorem ut."
            }
         ],
         "name": "Similique libero."
      },
      {
         "education": [
            {
               "institution": "Ex sequi.",
               "major": "Autem voluptate."
            },
            {
               "institution": "Ex sequi.",
               "major": "Autem voluptate."
            },
            {
               "institution": "Ex sequi.",
               "major": "Autem voluptate."
            },
            {
               "institution": "Ex sequi.",
               "major": "Autem voluptate."
            }
         ],
         "experience": [
            {
               "company": "Cum maiores quo at ducimus sit.",
               "duration": 4539614019828256019,
               "role": "Eaque est nihil voluptate dolorem ut."
            },
            {
               "company": "Cum maiores quo at ducimus sit.",
               "duration": 4539614019828256019,
               "role": "Eaque est nihil voluptate dolorem ut."
            }
         ],
         "name": "Similique libero."
      },
      {
         "education": [
            {
               "institution": "Ex sequi.",
               "major": "Autem voluptate."
            },
            {
               "institution": "Ex sequi.",
               "major": "Autem voluptate."
            },
            {
               "institution": "Ex sequi.",
               "major": "Autem voluptate."
            },
            {
               "institution": "Ex sequi.",
               "major": "Autem voluptate."
            }
         ],
         "experience": [
            {
               "company": "Cum maiores quo at ducimus sit.",
               "duration": 4539614019828256019,
               "role": "Eaque est nihil voluptate dolorem ut."
            },
            {
               "company": "Cum maiores quo at ducimus sit.",
               "duration": 4539614019828256019,
               "role": "Eaque est nihil voluptate dolorem ut."
            }
         ],
         "name": "Similique libero."
      }
   ]'`)
}
