// Code generated by goa v3.19.1, DO NOT EDIT.
//
// interceptors endpoints
//
// Command:
// $ goa gen goa.design/examples/interceptors/design

package interceptors

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "interceptors" service endpoints.
type Endpoints struct {
	Get    goa.Endpoint
	Create goa.Endpoint
	Stream goa.Endpoint
}

// StreamEndpointInput holds both the payload and the server stream of the
// "stream" method.
type StreamEndpointInput struct {
	// Payload is the method payload.
	Payload *StreamPayload
	// Stream is the server stream used by the "stream" method to send data.
	Stream StreamServerStream
}

// NewEndpoints wraps the methods of the "interceptors" service with endpoints.
func NewEndpoints(s Service, si ServerInterceptors) *Endpoints {
	endpoints := &Endpoints{
		Get:    NewGetEndpoint(s),
		Create: NewCreateEndpoint(s),
		Stream: NewStreamEndpoint(s),
	}
	endpoints.Get = WrapGetEndpoint(endpoints.Get, si)
	endpoints.Create = WrapCreateEndpoint(endpoints.Create, si)
	endpoints.Stream = WrapStreamEndpoint(endpoints.Stream, si)
	return endpoints
}

// Use applies the given middleware to all the "interceptors" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Get = m(e.Get)
	e.Create = m(e.Create)
	e.Stream = m(e.Stream)
}

// NewGetEndpoint returns an endpoint function that calls the method "get" of
// service "interceptors".
func NewGetEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetPayload)
		return s.Get(ctx, p)
	}
}

// NewCreateEndpoint returns an endpoint function that calls the method
// "create" of service "interceptors".
func NewCreateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreatePayload)
		return s.Create(ctx, p)
	}
}

// NewStreamEndpoint returns an endpoint function that calls the method
// "stream" of service "interceptors".
func NewStreamEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		ep := req.(*StreamEndpointInput)
		return nil, s.Stream(ctx, ep.Payload, ep.Stream)
	}
}
