// Code generated by goa v3.19.1, DO NOT EDIT.
//
// Interceptor wrappers
//
// Command:
// $ goa gen goa.design/examples/interceptors/design

package interceptors

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// wrapCacheGet applies the Cache server interceptor to endpoints.
func wrapGetCache(endpoint goa.Endpoint, i ServerInterceptors) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		info := &CacheInfo{
			Service:    "interceptors",
			Method:     "Get",
			Endpoint:   endpoint,
			RawPayload: req,
		}
		return i.Cache(ctx, info, endpoint)
	}
}

// wrapJWTAuthGet applies the JWTAuth server interceptor to endpoints.
func wrapGetJWTAuth(endpoint goa.Endpoint, i ServerInterceptors) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		info := &JWTAuthInfo{
			Service:    "interceptors",
			Method:     "Get",
			Endpoint:   endpoint,
			RawPayload: req,
		}
		return i.JWTAuth(ctx, info, endpoint)
	}
}

// wrapJWTAuthCreate applies the JWTAuth server interceptor to endpoints.
func wrapCreateJWTAuth(endpoint goa.Endpoint, i ServerInterceptors) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		info := &JWTAuthInfo{
			Service:    "interceptors",
			Method:     "Create",
			Endpoint:   endpoint,
			RawPayload: req,
		}
		return i.JWTAuth(ctx, info, endpoint)
	}
}

// wrapRequestAuditGet applies the RequestAudit server interceptor to endpoints.
func wrapGetRequestAudit(endpoint goa.Endpoint, i ServerInterceptors) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		info := &RequestAuditInfo{
			Service:    "interceptors",
			Method:     "Get",
			Endpoint:   endpoint,
			RawPayload: req,
		}
		return i.RequestAudit(ctx, info, endpoint)
	}
}

// wrapRequestAuditCreate applies the RequestAudit server interceptor to
// endpoints.
func wrapCreateRequestAudit(endpoint goa.Endpoint, i ServerInterceptors) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		info := &RequestAuditInfo{
			Service:    "interceptors",
			Method:     "Create",
			Endpoint:   endpoint,
			RawPayload: req,
		}
		return i.RequestAudit(ctx, info, endpoint)
	}
}

// wrapSetDeadlineGet applies the SetDeadline server interceptor to endpoints.
func wrapGetSetDeadline(endpoint goa.Endpoint, i ServerInterceptors) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		info := &SetDeadlineInfo{
			Service:    "interceptors",
			Method:     "Get",
			Endpoint:   endpoint,
			RawPayload: req,
		}
		return i.SetDeadline(ctx, info, endpoint)
	}
}

// wrapSetDeadlineCreate applies the SetDeadline server interceptor to
// endpoints.
func wrapCreateSetDeadline(endpoint goa.Endpoint, i ServerInterceptors) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		info := &SetDeadlineInfo{
			Service:    "interceptors",
			Method:     "Create",
			Endpoint:   endpoint,
			RawPayload: req,
		}
		return i.SetDeadline(ctx, info, endpoint)
	}
}

// wrapTraceRequestGet applies the TraceRequest server interceptor to endpoints.
func wrapGetTraceRequest(endpoint goa.Endpoint, i ServerInterceptors) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		info := &TraceRequestInfo{
			Service:    "interceptors",
			Method:     "Get",
			Endpoint:   endpoint,
			RawPayload: req,
		}
		return i.TraceRequest(ctx, info, endpoint)
	}
}

// wrapTraceRequestCreate applies the TraceRequest server interceptor to
// endpoints.
func wrapCreateTraceRequest(endpoint goa.Endpoint, i ServerInterceptors) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		info := &TraceRequestInfo{
			Service:    "interceptors",
			Method:     "Create",
			Endpoint:   endpoint,
			RawPayload: req,
		}
		return i.TraceRequest(ctx, info, endpoint)
	}
}

// wrapClientEncodeTenantGet applies the EncodeTenant client interceptor to
// endpoints.
func wrapClientGetEncodeTenant(endpoint goa.Endpoint, i ClientInterceptors) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		info := &EncodeTenantInfo{
			Service:    "interceptors",
			Method:     "Get",
			Endpoint:   endpoint,
			RawPayload: req,
		}
		return i.EncodeTenant(ctx, info, endpoint)
	}
}

// wrapClientEncodeTenantCreate applies the EncodeTenant client interceptor to
// endpoints.
func wrapClientCreateEncodeTenant(endpoint goa.Endpoint, i ClientInterceptors) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		info := &EncodeTenantInfo{
			Service:    "interceptors",
			Method:     "Create",
			Endpoint:   endpoint,
			RawPayload: req,
		}
		return i.EncodeTenant(ctx, info, endpoint)
	}
}

// wrapClientRetryGet applies the Retry client interceptor to endpoints.
func wrapClientGetRetry(endpoint goa.Endpoint, i ClientInterceptors) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		info := &RetryInfo{
			Service:    "interceptors",
			Method:     "Get",
			Endpoint:   endpoint,
			RawPayload: req,
		}
		return i.Retry(ctx, info, endpoint)
	}
}

// wrapClientRetryCreate applies the Retry client interceptor to endpoints.
func wrapClientCreateRetry(endpoint goa.Endpoint, i ClientInterceptors) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		info := &RetryInfo{
			Service:    "interceptors",
			Method:     "Create",
			Endpoint:   endpoint,
			RawPayload: req,
		}
		return i.Retry(ctx, info, endpoint)
	}
}
