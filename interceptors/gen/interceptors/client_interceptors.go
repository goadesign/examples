// Code generated by goa v3.19.1, DO NOT EDIT.
//
// interceptorsClient Interceptors
//
// Command:
// $ goa gen goa.design/examples/interceptors/design

package interceptors

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// ClientInterceptors defines the interface for all client-side interceptors.
// Client interceptors execute after the payload is encoded and before the request
// is sent to the server. The implementation is responsible for calling next to
// complete the request.
type ClientInterceptors interface {
	// Client-side interceptor which writes the tenant ID to the signed JWT
	// contained in the Authorization header
	EncodeTenant(ctx context.Context, info *EncodeTenantInfo, next goa.Endpoint) (any, error)
	// Client-side interceptor which implements smart retry logic with exponential
	// backoff
	Retry(ctx context.Context, info *RetryInfo, next goa.Endpoint) (any, error)
	// Server-side and client-side interceptor that adds trace context to the
	// bidirectional stream payload
	TraceBidirectionalStream(ctx context.Context, info *TraceBidirectionalStreamInfo, next goa.Endpoint) (any, error)
}

// Access interfaces for interceptor payloads and results
type (
	// EncodeTenantInfo provides metadata about the current interception.
	// It includes service name, method name, and access to the endpoint.
	EncodeTenantInfo struct {
		service    string
		method     string
		callType   goa.InterceptorCallType
		rawPayload any
	}

	// EncodeTenantPayload provides type-safe access to the method payload.
	// It allows reading and writing specific fields of the payload as defined
	// in the design.
	EncodeTenantPayload interface {
		TenantID() UUID
		SetAuth(string)
	}
	// RetryInfo provides metadata about the current interception.
	// It includes service name, method name, and access to the endpoint.
	RetryInfo struct {
		service    string
		method     string
		callType   goa.InterceptorCallType
		rawPayload any
	}

	// RetryResult provides type-safe access to the method result.
	// It allows reading and writing specific fields of the result as defined
	// in the design.
	RetryResult interface {
		Status() int
		SetRetryCount(int)
		SetRetryDuration(int)
	}
)

// Private implementation types
type (
	encodeTenantGetPayload struct {
		payload *GetPayload
	}
	encodeTenantCreatePayload struct {
		payload *CreatePayload
	}
	encodeTenantStreamPayload struct {
		payload *StreamPayload
	}
	retryGetResult struct {
		result *GetResult
	}
	retryCreateResult struct {
		result *CreateResult
	}
)

// WrapGetClientEndpoint wraps the get endpoint with the client interceptors
// defined in the design.
func WrapGetClientEndpoint(endpoint goa.Endpoint, i ClientInterceptors) goa.Endpoint {
	endpoint = wrapClientGetEncodeTenant(endpoint, i)
	endpoint = wrapClientGetRetry(endpoint, i)
	return endpoint
}

// WrapCreateClientEndpoint wraps the create endpoint with the client
// interceptors defined in the design.
func WrapCreateClientEndpoint(endpoint goa.Endpoint, i ClientInterceptors) goa.Endpoint {
	endpoint = wrapClientCreateEncodeTenant(endpoint, i)
	endpoint = wrapClientCreateRetry(endpoint, i)
	return endpoint
}

// WrapStreamClientEndpoint wraps the stream endpoint with the client
// interceptors defined in the design.
func WrapStreamClientEndpoint(endpoint goa.Endpoint, i ClientInterceptors) goa.Endpoint {
	endpoint = wrapClientStreamEncodeTenant(endpoint, i)
	endpoint = wrapClientStreamTraceBidirectionalStream(endpoint, i)
	return endpoint
}

// Public accessor methods for Info types

// Service returns the name of the service handling the request.
func (info *EncodeTenantInfo) Service() string {
	return info.service
}

// Method returns the name of the method handling the request.
func (info *EncodeTenantInfo) Method() string {
	return info.method
}

// CallType returns the type of call the interceptor is handling.
func (info *EncodeTenantInfo) CallType() goa.InterceptorCallType {
	return info.callType
}

// RawPayload returns the raw payload of the request.
func (info *EncodeTenantInfo) RawPayload() any {
	return info.rawPayload
}

// Payload returns a type-safe accessor for the method payload.
func (info *EncodeTenantInfo) Payload() EncodeTenantPayload {
	switch info.Method() {
	case "Get":
		return &encodeTenantGetPayload{payload: info.RawPayload().(*GetPayload)}
	case "Create":
		return &encodeTenantCreatePayload{payload: info.RawPayload().(*CreatePayload)}
	case "Stream":
		return &encodeTenantStreamPayload{payload: info.RawPayload().(*StreamPayload)}
	default:
		return nil
	}
}

// Service returns the name of the service handling the request.
func (info *RetryInfo) Service() string {
	return info.service
}

// Method returns the name of the method handling the request.
func (info *RetryInfo) Method() string {
	return info.method
}

// CallType returns the type of call the interceptor is handling.
func (info *RetryInfo) CallType() goa.InterceptorCallType {
	return info.callType
}

// RawPayload returns the raw payload of the request.
func (info *RetryInfo) RawPayload() any {
	return info.rawPayload
}

// Result returns a type-safe accessor for the method result.
func (info *RetryInfo) Result(res any) RetryResult {
	switch info.Method() {
	case "Get":
		return &retryGetResult{result: res.(*GetResult)}
	case "Create":
		return &retryCreateResult{result: res.(*CreateResult)}
	default:
		return nil
	}
}

// Private implementation methods

func (p *encodeTenantGetPayload) TenantID() UUID {
	return p.payload.TenantID
}
func (p *encodeTenantGetPayload) SetAuth(v string) {
	p.payload.Auth = v
}
func (p *encodeTenantCreatePayload) TenantID() UUID {
	return p.payload.TenantID
}
func (p *encodeTenantCreatePayload) SetAuth(v string) {
	p.payload.Auth = v
}
func (p *encodeTenantStreamPayload) TenantID() UUID {
	return p.payload.TenantID
}
func (p *encodeTenantStreamPayload) SetAuth(v string) {
	p.payload.Auth = v
}

func (r *retryGetResult) Status() int {
	return r.result.Status
}
func (r *retryGetResult) SetRetryCount(v int) {
	r.result.RetryCount = &v
}
func (r *retryGetResult) SetRetryDuration(v int) {
	r.result.RetryDuration = &v
}
func (r *retryCreateResult) Status() int {
	return r.result.Status
}
func (r *retryCreateResult) SetRetryCount(v int) {
	r.result.RetryCount = &v
}
func (r *retryCreateResult) SetRetryDuration(v int) {
	r.result.RetryDuration = &v
}
