// Code generated by goa v3.19.1, DO NOT EDIT.
//
// interceptors WebSocket server streaming
//
// Command:
// $ goa gen goa.design/examples/interceptors/design

package server

import (
	"context"
	"io"
	"net/http"
	"sync"
	"time"

	"github.com/gorilla/websocket"
	interceptors "goa.design/examples/interceptors/gen/interceptors"
	goahttp "goa.design/goa/v3/http"
)

// ConnConfigurer holds the websocket connection configurer functions for the
// streaming endpoints in "interceptors" service.
type ConnConfigurer struct {
	StreamFn goahttp.ConnConfigureFunc
}

// StreamServerStream implements the interceptors.StreamServerStream interface.
type StreamServerStream struct {
	once sync.Once
	// upgrader is the websocket connection upgrader.
	upgrader goahttp.Upgrader
	// configurer is the websocket connection configurer.
	configurer goahttp.ConnConfigureFunc
	// cancel is the context cancellation function which cancels the request
	// context when invoked.
	cancel context.CancelFunc
	// w is the HTTP response writer used in upgrading the connection.
	w http.ResponseWriter
	// r is the HTTP request.
	r *http.Request
	// conn is the underlying websocket connection.
	conn *websocket.Conn
}

// NewConnConfigurer initializes the websocket connection configurer function
// with fn for all the streaming endpoints in "interceptors" service.
func NewConnConfigurer(fn goahttp.ConnConfigureFunc) *ConnConfigurer {
	return &ConnConfigurer{
		StreamFn: fn,
	}
}

// Send streams instances of "interceptors.StreamResult" to the "stream"
// endpoint websocket connection.
func (s *StreamServerStream) Send(v *interceptors.StreamResult) error {
	var err error
	// Upgrade the HTTP connection to a websocket connection only once. Connection
	// upgrade is done here so that authorization logic in the endpoint is executed
	// before calling the actual service method which may call Send().
	s.once.Do(func() {
		var conn *websocket.Conn
		conn, err = s.upgrader.Upgrade(s.w, s.r, nil)
		if err != nil {
			return
		}
		if s.configurer != nil {
			conn = s.configurer(conn, s.cancel)
		}
		s.conn = conn
	})
	if err != nil {
		return err
	}
	res := v
	body := NewStreamResponseBody(res)
	return s.conn.WriteJSON(body)
}

// SendWithContext streams instances of "interceptors.StreamResult" to the
// "stream" endpoint websocket connection with context.
func (s *StreamServerStream) SendWithContext(ctx context.Context, v *interceptors.StreamResult) error {
	return s.Send(v)
}

// Recv reads instances of "interceptors.StreamStreamingPayload" from the
// "stream" endpoint websocket connection.
func (s *StreamServerStream) Recv() (*interceptors.StreamStreamingPayload, error) {
	var (
		rv  *interceptors.StreamStreamingPayload
		msg *StreamStreamingBody
		err error
	)
	// Upgrade the HTTP connection to a websocket connection only once. Connection
	// upgrade is done here so that authorization logic in the endpoint is executed
	// before calling the actual service method which may call Recv().
	s.once.Do(func() {
		var conn *websocket.Conn
		conn, err = s.upgrader.Upgrade(s.w, s.r, nil)
		if err != nil {
			return
		}
		if s.configurer != nil {
			conn = s.configurer(conn, s.cancel)
		}
		s.conn = conn
	})
	if err != nil {
		return rv, err
	}
	if err = s.conn.ReadJSON(&msg); err != nil {
		return rv, err
	}
	if msg == nil {
		return rv, io.EOF
	}
	body := *msg
	err = ValidateStreamStreamingBody(&body)
	if err != nil {
		return rv, err
	}
	return NewStreamStreamingBody(msg), nil
}

// RecvWithContext reads instances of "interceptors.StreamStreamingPayload"
// from the "stream" endpoint websocket connection with context.
func (s *StreamServerStream) RecvWithContext(ctx context.Context) (*interceptors.StreamStreamingPayload, error) {
	return s.Recv()
}

// Close closes the "stream" endpoint websocket connection.
func (s *StreamServerStream) Close() error {
	var err error
	if s.conn == nil {
		return nil
	}
	if err = s.conn.WriteControl(
		websocket.CloseMessage,
		websocket.FormatCloseMessage(websocket.CloseNormalClosure, "server closing connection"),
		time.Now().Add(time.Second),
	); err != nil {
		return err
	}
	return s.conn.Close()
}
