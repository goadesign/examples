// Code generated by goa v3.19.1, DO NOT EDIT.
//
// interceptors HTTP server types
//
// Command:
// $ goa gen goa.design/examples/interceptors/design

package server

import (
	interceptors "goa.design/examples/interceptors/gen/interceptors"
	goa "goa.design/goa/v3/pkg"
)

// GetRequestBody is the type of the "interceptors" service "get" endpoint HTTP
// request body.
type GetRequestBody struct {
	// Unique trace ID for request, initialized by the TraceRequest interceptor
	TraceID *string `form:"traceID,omitempty" json:"traceID,omitempty" xml:"traceID,omitempty"`
	// Unique span ID for request, initialized by the TraceRequest interceptor
	SpanID *string `form:"spanID,omitempty" json:"spanID,omitempty" xml:"spanID,omitempty"`
}

// CreateRequestBody is the type of the "interceptors" service "create"
// endpoint HTTP request body.
type CreateRequestBody struct {
	// Value to store in record
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
	// Unique trace ID for request, initialized by the TraceRequest interceptor
	TraceID *string `form:"traceID,omitempty" json:"traceID,omitempty" xml:"traceID,omitempty"`
	// Unique span ID for request, initialized by the TraceRequest interceptor
	SpanID *string `form:"spanID,omitempty" json:"spanID,omitempty" xml:"spanID,omitempty"`
}

// StreamStreamingBody is the type of the "interceptors" service "stream"
// endpoint HTTP request body.
type StreamStreamingBody struct {
	// ID of the created record
	ID *UUIDStreamingBody `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Value of the record
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
	// Unique trace ID for request, initialized by the TraceRequest interceptor
	TraceID *UUIDStreamingBody `form:"traceID,omitempty" json:"traceID,omitempty" xml:"traceID,omitempty"`
	// Unique span ID for request, initialized by the TraceRequest interceptor
	SpanID *UUIDStreamingBody `form:"spanID,omitempty" json:"spanID,omitempty" xml:"spanID,omitempty"`
}

// GetResponseBody is the type of the "interceptors" service "get" endpoint
// HTTP response body.
type GetResponseBody struct {
	// ID of the record
	ID string `form:"id" json:"id" xml:"id"`
	// Value of the record
	Value string `form:"value" json:"value" xml:"value"`
	// Tenant the record belongs to
	Tenant string `form:"tenant" json:"tenant" xml:"tenant"`
	// Response status code
	Status int `form:"status" json:"status" xml:"status"`
	// Timestamp when processed, written by the RequestAudit interceptor
	ProcessedAt string `form:"processedAt" json:"processedAt" xml:"processedAt"`
	// Processing duration in ms, written by the RequestAudit interceptor
	Duration int `form:"duration" json:"duration" xml:"duration"`
	// Time at which the record was cached, written by the Cache interceptor
	CachedAt *string `form:"cachedAt,omitempty" json:"cachedAt,omitempty" xml:"cachedAt,omitempty"`
	// Number of retry attempts made, written client-side by the Retry interceptor
	RetryCount *int `form:"retryCount,omitempty" json:"retryCount,omitempty" xml:"retryCount,omitempty"`
	// Total time spent retrying, written client-side by the Retry interceptor
	RetryDuration *int `form:"retryDuration,omitempty" json:"retryDuration,omitempty" xml:"retryDuration,omitempty"`
}

// CreateResponseBody is the type of the "interceptors" service "create"
// endpoint HTTP response body.
type CreateResponseBody struct {
	// ID of the created record
	ID string `form:"id" json:"id" xml:"id"`
	// Value of the record
	Value string `form:"value" json:"value" xml:"value"`
	// Tenant the record belongs to
	Tenant string `form:"tenant" json:"tenant" xml:"tenant"`
	// Response status code
	Status int `form:"status" json:"status" xml:"status"`
	// Timestamp when processed
	ProcessedAt string `form:"processedAt" json:"processedAt" xml:"processedAt"`
	// Processing duration in ms
	Duration int `form:"duration" json:"duration" xml:"duration"`
	// Number of retry attempts made
	RetryCount *int `form:"retryCount,omitempty" json:"retryCount,omitempty" xml:"retryCount,omitempty"`
	// Total time spent retrying
	RetryDuration *int `form:"retryDuration,omitempty" json:"retryDuration,omitempty" xml:"retryDuration,omitempty"`
}

// StreamResponseBody is the type of the "interceptors" service "stream"
// endpoint HTTP response body.
type StreamResponseBody struct {
	// ID of the created record
	ID string `form:"id" json:"id" xml:"id"`
	// Value of the record
	Value string `form:"value" json:"value" xml:"value"`
	// Tenant the record belongs to
	Tenant string `form:"tenant" json:"tenant" xml:"tenant"`
	// Response status code
	Status int `form:"status" json:"status" xml:"status"`
	// Unique trace ID for request, initialized by the TraceRequest interceptor
	TraceID *string `form:"traceID,omitempty" json:"traceID,omitempty" xml:"traceID,omitempty"`
	// Unique span ID for request, initialized by the TraceRequest interceptor
	SpanID *string `form:"spanID,omitempty" json:"spanID,omitempty" xml:"spanID,omitempty"`
}

// GetNotFoundResponseBody is the type of the "interceptors" service "get"
// endpoint HTTP response body for the "NotFound" error.
type GetNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetUnavailableResponseBody is the type of the "interceptors" service "get"
// endpoint HTTP response body for the "Unavailable" error.
type GetUnavailableResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UUIDStreamingBody is used to define fields on request body types.
type UUIDStreamingBody string

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "interceptors" service.
func NewGetResponseBody(res *interceptors.GetResult) *GetResponseBody {
	body := &GetResponseBody{
		ID:            string(res.ID),
		Value:         res.Value,
		Tenant:        res.Tenant,
		Status:        res.Status,
		ProcessedAt:   res.ProcessedAt,
		Duration:      res.Duration,
		CachedAt:      res.CachedAt,
		RetryCount:    res.RetryCount,
		RetryDuration: res.RetryDuration,
	}
	return body
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "interceptors" service.
func NewCreateResponseBody(res *interceptors.CreateResult) *CreateResponseBody {
	body := &CreateResponseBody{
		ID:            string(res.ID),
		Value:         res.Value,
		Tenant:        res.Tenant,
		Status:        res.Status,
		ProcessedAt:   res.ProcessedAt,
		Duration:      res.Duration,
		RetryCount:    res.RetryCount,
		RetryDuration: res.RetryDuration,
	}
	return body
}

// NewStreamResponseBody builds the HTTP response body from the result of the
// "stream" endpoint of the "interceptors" service.
func NewStreamResponseBody(res *interceptors.StreamResult) *StreamResponseBody {
	body := &StreamResponseBody{
		ID:     string(res.ID),
		Value:  res.Value,
		Tenant: res.Tenant,
		Status: res.Status,
	}
	if res.TraceID != nil {
		traceID := string(*res.TraceID)
		body.TraceID = &traceID
	}
	if res.SpanID != nil {
		spanID := string(*res.SpanID)
		body.SpanID = &spanID
	}
	return body
}

// NewGetNotFoundResponseBody builds the HTTP response body from the result of
// the "get" endpoint of the "interceptors" service.
func NewGetNotFoundResponseBody(res *goa.ServiceError) *GetNotFoundResponseBody {
	body := &GetNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUnavailableResponseBody builds the HTTP response body from the result
// of the "get" endpoint of the "interceptors" service.
func NewGetUnavailableResponseBody(res *goa.ServiceError) *GetUnavailableResponseBody {
	body := &GetUnavailableResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetPayload builds a interceptors service get endpoint payload.
func NewGetPayload(body *GetRequestBody, tenantID string, recordID string, auth string) *interceptors.GetPayload {
	v := &interceptors.GetPayload{}
	if body.TraceID != nil {
		traceID := interceptors.UUID(*body.TraceID)
		v.TraceID = &traceID
	}
	if body.SpanID != nil {
		spanID := interceptors.UUID(*body.SpanID)
		v.SpanID = &spanID
	}
	v.TenantID = interceptors.UUID(tenantID)
	v.RecordID = interceptors.UUID(recordID)
	v.Auth = auth

	return v
}

// NewCreatePayload builds a interceptors service create endpoint payload.
func NewCreatePayload(body *CreateRequestBody, tenantID string, auth string) *interceptors.CreatePayload {
	v := &interceptors.CreatePayload{
		Value: *body.Value,
	}
	if body.TraceID != nil {
		traceID := interceptors.UUID(*body.TraceID)
		v.TraceID = &traceID
	}
	if body.SpanID != nil {
		spanID := interceptors.UUID(*body.SpanID)
		v.SpanID = &spanID
	}
	v.TenantID = interceptors.UUID(tenantID)
	v.Auth = auth

	return v
}

// NewStreamPayload builds a interceptors service stream endpoint payload.
func NewStreamPayload(tenantID string, auth string) *interceptors.StreamPayload {
	v := &interceptors.StreamPayload{}
	v.TenantID = interceptors.UUID(tenantID)
	v.Auth = auth

	return v
}

// NewStreamStreamingBody builds a interceptors service stream endpoint payload.
func NewStreamStreamingBody(body *StreamStreamingBody) *interceptors.StreamStreamingPayload {
	v := &interceptors.StreamStreamingPayload{
		ID:    interceptors.UUID(*body.ID),
		Value: *body.Value,
	}
	if body.TraceID != nil {
		traceID := interceptors.UUID(*body.TraceID)
		v.TraceID = &traceID
	}
	if body.SpanID != nil {
		spanID := interceptors.UUID(*body.SpanID)
		v.SpanID = &spanID
	}

	return v
}

// ValidateGetRequestBody runs the validations defined on GetRequestBody
func ValidateGetRequestBody(body *GetRequestBody) (err error) {
	if body.TraceID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.traceID", *body.TraceID, goa.FormatUUID))
	}
	if body.SpanID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.spanID", *body.SpanID, goa.FormatUUID))
	}
	return
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	if body.TraceID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.traceID", *body.TraceID, goa.FormatUUID))
	}
	if body.SpanID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.spanID", *body.SpanID, goa.FormatUUID))
	}
	return
}

// ValidateStreamStreamingBody runs the validations defined on
// StreamStreamingBody
func ValidateStreamStreamingBody(body *StreamStreamingBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", string(*body.ID), goa.FormatUUID))
	}
	if body.TraceID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.traceID", string(*body.TraceID), goa.FormatUUID))
	}
	if body.SpanID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.spanID", string(*body.SpanID), goa.FormatUUID))
	}
	return
}
