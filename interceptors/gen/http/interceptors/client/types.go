// Code generated by goa v3.19.1, DO NOT EDIT.
//
// interceptors HTTP client types
//
// Command:
// $ goa gen goa.design/examples/interceptors/design

package client

import (
	interceptors "goa.design/examples/interceptors/gen/interceptors"
	goa "goa.design/goa/v3/pkg"
)

// GetRequestBody is the type of the "interceptors" service "get" endpoint HTTP
// request body.
type GetRequestBody struct {
	// Unique trace ID for request, initialized by the TraceRequest interceptor
	TraceID *string `form:"traceID,omitempty" json:"traceID,omitempty" xml:"traceID,omitempty"`
	// Unique span ID for request, initialized by the TraceRequest interceptor
	SpanID *string `form:"spanID,omitempty" json:"spanID,omitempty" xml:"spanID,omitempty"`
}

// CreateRequestBody is the type of the "interceptors" service "create"
// endpoint HTTP request body.
type CreateRequestBody struct {
	// Value to store in record
	Value string `form:"value" json:"value" xml:"value"`
	// Unique trace ID for request, initialized by the TraceRequest interceptor
	TraceID *string `form:"traceID,omitempty" json:"traceID,omitempty" xml:"traceID,omitempty"`
	// Unique span ID for request, initialized by the TraceRequest interceptor
	SpanID *string `form:"spanID,omitempty" json:"spanID,omitempty" xml:"spanID,omitempty"`
}

// StreamStreamingBody is the type of the "interceptors" service "stream"
// endpoint HTTP request body.
type StreamStreamingBody struct {
	// ID of the created record
	ID UUIDStreamingBody `form:"id" json:"id" xml:"id"`
	// Value of the record
	Value string `form:"value" json:"value" xml:"value"`
	// Unique trace ID for request, initialized by the TraceRequest interceptor
	TraceID *UUIDStreamingBody `form:"traceID,omitempty" json:"traceID,omitempty" xml:"traceID,omitempty"`
	// Unique span ID for request, initialized by the TraceRequest interceptor
	SpanID *UUIDStreamingBody `form:"spanID,omitempty" json:"spanID,omitempty" xml:"spanID,omitempty"`
}

// GetResponseBody is the type of the "interceptors" service "get" endpoint
// HTTP response body.
type GetResponseBody struct {
	// ID of the record
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Value of the record
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
	// Tenant the record belongs to
	Tenant *string `form:"tenant,omitempty" json:"tenant,omitempty" xml:"tenant,omitempty"`
	// Response status code
	Status *int `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Timestamp when processed, written by the RequestAudit interceptor
	ProcessedAt *string `form:"processedAt,omitempty" json:"processedAt,omitempty" xml:"processedAt,omitempty"`
	// Processing duration in ms, written by the RequestAudit interceptor
	Duration *int `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	// Time at which the record was cached, written by the Cache interceptor
	CachedAt *string `form:"cachedAt,omitempty" json:"cachedAt,omitempty" xml:"cachedAt,omitempty"`
	// Number of retry attempts made, written client-side by the Retry interceptor
	RetryCount *int `form:"retryCount,omitempty" json:"retryCount,omitempty" xml:"retryCount,omitempty"`
	// Total time spent retrying, written client-side by the Retry interceptor
	RetryDuration *int `form:"retryDuration,omitempty" json:"retryDuration,omitempty" xml:"retryDuration,omitempty"`
}

// CreateResponseBody is the type of the "interceptors" service "create"
// endpoint HTTP response body.
type CreateResponseBody struct {
	// ID of the created record
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Value of the record
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
	// Tenant the record belongs to
	Tenant *string `form:"tenant,omitempty" json:"tenant,omitempty" xml:"tenant,omitempty"`
	// Response status code
	Status *int `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Timestamp when processed
	ProcessedAt *string `form:"processedAt,omitempty" json:"processedAt,omitempty" xml:"processedAt,omitempty"`
	// Processing duration in ms
	Duration *int `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	// Number of retry attempts made
	RetryCount *int `form:"retryCount,omitempty" json:"retryCount,omitempty" xml:"retryCount,omitempty"`
	// Total time spent retrying
	RetryDuration *int `form:"retryDuration,omitempty" json:"retryDuration,omitempty" xml:"retryDuration,omitempty"`
}

// StreamResponseBody is the type of the "interceptors" service "stream"
// endpoint HTTP response body.
type StreamResponseBody struct {
	// ID of the created record
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Value of the record
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
	// Tenant the record belongs to
	Tenant *string `form:"tenant,omitempty" json:"tenant,omitempty" xml:"tenant,omitempty"`
	// Response status code
	Status *int `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Unique trace ID for request, initialized by the TraceRequest interceptor
	TraceID *string `form:"traceID,omitempty" json:"traceID,omitempty" xml:"traceID,omitempty"`
	// Unique span ID for request, initialized by the TraceRequest interceptor
	SpanID *string `form:"spanID,omitempty" json:"spanID,omitempty" xml:"spanID,omitempty"`
}

// GetNotFoundResponseBody is the type of the "interceptors" service "get"
// endpoint HTTP response body for the "NotFound" error.
type GetNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetUnavailableResponseBody is the type of the "interceptors" service "get"
// endpoint HTTP response body for the "Unavailable" error.
type GetUnavailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UUIDStreamingBody is used to define fields on request body types.
type UUIDStreamingBody string

// NewGetRequestBody builds the HTTP request body from the payload of the "get"
// endpoint of the "interceptors" service.
func NewGetRequestBody(p *interceptors.GetPayload) *GetRequestBody {
	body := &GetRequestBody{}
	if p.TraceID != nil {
		traceID := string(*p.TraceID)
		body.TraceID = &traceID
	}
	if p.SpanID != nil {
		spanID := string(*p.SpanID)
		body.SpanID = &spanID
	}
	return body
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "interceptors" service.
func NewCreateRequestBody(p *interceptors.CreatePayload) *CreateRequestBody {
	body := &CreateRequestBody{
		Value: p.Value,
	}
	if p.TraceID != nil {
		traceID := string(*p.TraceID)
		body.TraceID = &traceID
	}
	if p.SpanID != nil {
		spanID := string(*p.SpanID)
		body.SpanID = &spanID
	}
	return body
}

// NewStreamStreamingBody builds the HTTP request body from the payload of the
// "stream" endpoint of the "interceptors" service.
func NewStreamStreamingBody(p *interceptors.StreamStreamingPayload) *StreamStreamingBody {
	body := &StreamStreamingBody{
		ID:    UUIDStreamingBody(p.ID),
		Value: p.Value,
	}
	if p.TraceID != nil {
		traceID := UUIDStreamingBody(*p.TraceID)
		body.TraceID = &traceID
	}
	if p.SpanID != nil {
		spanID := UUIDStreamingBody(*p.SpanID)
		body.SpanID = &spanID
	}
	return body
}

// NewGetResultOK builds a "interceptors" service "get" endpoint result from a
// HTTP "OK" response.
func NewGetResultOK(body *GetResponseBody) *interceptors.GetResult {
	v := &interceptors.GetResult{
		ID:            interceptors.UUID(*body.ID),
		Value:         *body.Value,
		Tenant:        *body.Tenant,
		Status:        *body.Status,
		ProcessedAt:   *body.ProcessedAt,
		Duration:      *body.Duration,
		CachedAt:      body.CachedAt,
		RetryCount:    body.RetryCount,
		RetryDuration: body.RetryDuration,
	}

	return v
}

// NewGetNotFound builds a interceptors service get endpoint NotFound error.
func NewGetNotFound(body *GetNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetUnavailable builds a interceptors service get endpoint Unavailable
// error.
func NewGetUnavailable(body *GetUnavailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateResultCreated builds a "interceptors" service "create" endpoint
// result from a HTTP "Created" response.
func NewCreateResultCreated(body *CreateResponseBody) *interceptors.CreateResult {
	v := &interceptors.CreateResult{
		ID:            interceptors.UUID(*body.ID),
		Value:         *body.Value,
		Tenant:        *body.Tenant,
		Status:        *body.Status,
		ProcessedAt:   *body.ProcessedAt,
		Duration:      *body.Duration,
		RetryCount:    body.RetryCount,
		RetryDuration: body.RetryDuration,
	}

	return v
}

// NewStreamResultOK builds a "interceptors" service "stream" endpoint result
// from a HTTP "OK" response.
func NewStreamResultOK(body *StreamResponseBody) *interceptors.StreamResult {
	v := &interceptors.StreamResult{
		ID:     interceptors.UUID(*body.ID),
		Value:  *body.Value,
		Tenant: *body.Tenant,
		Status: *body.Status,
	}
	if body.TraceID != nil {
		traceID := interceptors.UUID(*body.TraceID)
		v.TraceID = &traceID
	}
	if body.SpanID != nil {
		spanID := interceptors.UUID(*body.SpanID)
		v.SpanID = &spanID
	}

	return v
}

// ValidateGetResponseBody runs the validations defined on GetResponseBody
func ValidateGetResponseBody(body *GetResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	if body.Tenant == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tenant", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.ProcessedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("processedAt", "body"))
	}
	if body.Duration == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("duration", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	return
}

// ValidateCreateResponseBody runs the validations defined on CreateResponseBody
func ValidateCreateResponseBody(body *CreateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	if body.Tenant == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tenant", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.ProcessedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("processedAt", "body"))
	}
	if body.Duration == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("duration", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	return
}

// ValidateStreamResponseBody runs the validations defined on StreamResponseBody
func ValidateStreamResponseBody(body *StreamResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	if body.Tenant == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tenant", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.TraceID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.traceID", *body.TraceID, goa.FormatUUID))
	}
	if body.SpanID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.spanID", *body.SpanID, goa.FormatUUID))
	}
	return
}

// ValidateGetNotFoundResponseBody runs the validations defined on
// get_NotFound_response_body
func ValidateGetNotFoundResponseBody(body *GetNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetUnavailableResponseBody runs the validations defined on
// get_Unavailable_response_body
func ValidateGetUnavailableResponseBody(body *GetUnavailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
