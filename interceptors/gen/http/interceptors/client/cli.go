// Code generated by goa v3.19.1, DO NOT EDIT.
//
// interceptors HTTP client CLI support package
//
// Command:
// $ goa gen goa.design/examples/interceptors/design

package client

import (
	"encoding/json"
	"fmt"

	interceptors "goa.design/examples/interceptors/gen/interceptors"
	goa "goa.design/goa/v3/pkg"
)

// BuildGetPayload builds the payload for the interceptors get endpoint from
// CLI flags.
func BuildGetPayload(interceptorsGetBody string, interceptorsGetTenantID string, interceptorsGetRecordID string, interceptorsGetAuth string) (*interceptors.GetPayload, error) {
	var err error
	var body GetRequestBody
	{
		err = json.Unmarshal([]byte(interceptorsGetBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"spanID\": \"150d7874-6995-4405-9422-192a638fe1a3\",\n      \"traceID\": \"f03bb3ab-2f3b-4961-8396-30a04e467ad7\"\n   }'")
		}
		if body.TraceID != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.traceID", *body.TraceID, goa.FormatUUID))
		}
		if body.SpanID != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.spanID", *body.SpanID, goa.FormatUUID))
		}
		if err != nil {
			return nil, err
		}
	}
	var tenantID string
	{
		tenantID = interceptorsGetTenantID
		err = goa.MergeErrors(err, goa.ValidateFormat("tenantID", tenantID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var recordID string
	{
		recordID = interceptorsGetRecordID
		err = goa.MergeErrors(err, goa.ValidateFormat("recordID", recordID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var auth string
	{
		auth = interceptorsGetAuth
	}
	v := &interceptors.GetPayload{}
	if body.TraceID != nil {
		traceID := interceptors.UUID(*body.TraceID)
		v.TraceID = &traceID
	}
	if body.SpanID != nil {
		spanID := interceptors.UUID(*body.SpanID)
		v.SpanID = &spanID
	}
	v.TenantID = interceptors.UUID(tenantID)
	v.RecordID = interceptors.UUID(recordID)
	v.Auth = auth

	return v, nil
}

// BuildCreatePayload builds the payload for the interceptors create endpoint
// from CLI flags.
func BuildCreatePayload(interceptorsCreateBody string, interceptorsCreateTenantID string, interceptorsCreateAuth string) (*interceptors.CreatePayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(interceptorsCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"spanID\": \"60119d23-b695-492d-b0fb-4c5195591902\",\n      \"traceID\": \"d94bb031-1e29-4544-a640-ae17323e1a90\",\n      \"value\": \"Rerum nesciunt suscipit est quo.\"\n   }'")
		}
		if body.TraceID != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.traceID", *body.TraceID, goa.FormatUUID))
		}
		if body.SpanID != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.spanID", *body.SpanID, goa.FormatUUID))
		}
		if err != nil {
			return nil, err
		}
	}
	var tenantID string
	{
		tenantID = interceptorsCreateTenantID
		err = goa.MergeErrors(err, goa.ValidateFormat("tenantID", tenantID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var auth string
	{
		auth = interceptorsCreateAuth
	}
	v := &interceptors.CreatePayload{
		Value: body.Value,
	}
	if body.TraceID != nil {
		traceID := interceptors.UUID(*body.TraceID)
		v.TraceID = &traceID
	}
	if body.SpanID != nil {
		spanID := interceptors.UUID(*body.SpanID)
		v.SpanID = &spanID
	}
	v.TenantID = interceptors.UUID(tenantID)
	v.Auth = auth

	return v, nil
}

// BuildStreamPayload builds the payload for the interceptors stream endpoint
// from CLI flags.
func BuildStreamPayload(interceptorsStreamTenantID string, interceptorsStreamAuth string) (*interceptors.StreamPayload, error) {
	var err error
	var tenantID string
	{
		tenantID = interceptorsStreamTenantID
		err = goa.MergeErrors(err, goa.ValidateFormat("tenantID", tenantID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var auth string
	{
		auth = interceptorsStreamAuth
	}
	v := &interceptors.StreamPayload{}
	v.TenantID = interceptors.UUID(tenantID)
	v.Auth = auth

	return v, nil
}
