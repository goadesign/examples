// Code generated by goa v3.19.1, DO NOT EDIT.
//
// interceptors HTTP client encoders and decoders
//
// Command:
// $ goa gen goa.design/examples/interceptors/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	interceptors "goa.design/examples/interceptors/gen/interceptors"
	goahttp "goa.design/goa/v3/http"
)

// BuildGetRequest instantiates a HTTP request object with method and path set
// to call the "interceptors" service "get" endpoint
func (c *Client) BuildGetRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		tenantID string
		recordID string
	)
	{
		p, ok := v.(*interceptors.GetPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("interceptors", "get", "*interceptors.GetPayload", v)
		}
		tenantID = string(p.TenantID)
		recordID = string(p.RecordID)
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetInterceptorsPath(tenantID, recordID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("interceptors", "get", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetRequest returns an encoder for requests sent to the interceptors
// get server.
func EncodeGetRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*interceptors.GetPayload)
		if !ok {
			return goahttp.ErrInvalidType("interceptors", "get", "*interceptors.GetPayload", v)
		}
		{
			head := p.Auth
			req.Header.Set("Authorization", head)
		}
		body := NewGetRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("interceptors", "get", err)
		}
		return nil
	}
}

// DecodeGetResponse returns a decoder for responses returned by the
// interceptors get endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGetResponse may return the following errors:
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "Unavailable" (type *goa.ServiceError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeGetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("interceptors", "get", err)
			}
			err = ValidateGetResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("interceptors", "get", err)
			}
			res := NewGetResultOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("interceptors", "get", err)
			}
			err = ValidateGetNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("interceptors", "get", err)
			}
			return nil, NewGetNotFound(&body)
		case http.StatusServiceUnavailable:
			var (
				body GetUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("interceptors", "get", err)
			}
			err = ValidateGetUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("interceptors", "get", err)
			}
			return nil, NewGetUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("interceptors", "get", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateRequest instantiates a HTTP request object with method and path
// set to call the "interceptors" service "create" endpoint
func (c *Client) BuildCreateRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		tenantID string
	)
	{
		p, ok := v.(*interceptors.CreatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("interceptors", "create", "*interceptors.CreatePayload", v)
		}
		tenantID = string(p.TenantID)
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateInterceptorsPath(tenantID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("interceptors", "create", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateRequest returns an encoder for requests sent to the interceptors
// create server.
func EncodeCreateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*interceptors.CreatePayload)
		if !ok {
			return goahttp.ErrInvalidType("interceptors", "create", "*interceptors.CreatePayload", v)
		}
		{
			head := p.Auth
			req.Header.Set("Authorization", head)
		}
		body := NewCreateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("interceptors", "create", err)
		}
		return nil
	}
}

// DecodeCreateResponse returns a decoder for responses returned by the
// interceptors create endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeCreateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("interceptors", "create", err)
			}
			err = ValidateCreateResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("interceptors", "create", err)
			}
			res := NewCreateResultCreated(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("interceptors", "create", resp.StatusCode, string(body))
		}
	}
}

// BuildStreamRequest instantiates a HTTP request object with method and path
// set to call the "interceptors" service "stream" endpoint
func (c *Client) BuildStreamRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		tenantID string
	)
	{
		p, ok := v.(*interceptors.StreamPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("interceptors", "stream", "*interceptors.StreamPayload", v)
		}
		tenantID = string(p.TenantID)
	}
	scheme := c.scheme
	switch c.scheme {
	case "http":
		scheme = "ws"
	case "https":
		scheme = "wss"
	}
	u := &url.URL{Scheme: scheme, Host: c.host, Path: StreamInterceptorsPath(tenantID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("interceptors", "stream", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeStreamRequest returns an encoder for requests sent to the interceptors
// stream server.
func EncodeStreamRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*interceptors.StreamPayload)
		if !ok {
			return goahttp.ErrInvalidType("interceptors", "stream", "*interceptors.StreamPayload", v)
		}
		{
			head := p.Auth
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeStreamResponse returns a decoder for responses returned by the
// interceptors stream endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeStreamResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body StreamResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("interceptors", "stream", err)
			}
			err = ValidateStreamResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("interceptors", "stream", err)
			}
			res := NewStreamResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("interceptors", "stream", resp.StatusCode, string(body))
		}
	}
}
