// Code generated by goa v3.22.1, DO NOT EDIT.
//
// interceptors HTTP client CLI support package
//
// Command:
// $ goa gen goa.design/examples/interceptors/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	interceptorsc "goa.design/examples/interceptors/gen/http/interceptors/client"
	interceptors "goa.design/examples/interceptors/gen/interceptors"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() []string {
	return []string{
		"interceptors (get|create|stream)",
	}
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` interceptors get --body '{
      "spanID": "3d14158e-229c-4a36-a10f-52399658e40f",
      "traceID": "5c269208-646a-4c82-ba7d-9b7a4406162b"
   }' --tenant-id "ffbd0a2e-136e-4fd2-8320-ce9e0fe84395" --record-id "8f0c3e58-e473-4231-92da-7d6c3917b26a" --auth "Ipsa tempora dolorem quasi."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
	dialer goahttp.Dialer,
	interceptorsConfigurer *interceptorsc.ConnConfigurer,
	inter interceptors.ClientInterceptors,
) (goa.Endpoint, any, error) {
	var (
		interceptorsFlags = flag.NewFlagSet("interceptors", flag.ContinueOnError)

		interceptorsGetFlags        = flag.NewFlagSet("get", flag.ExitOnError)
		interceptorsGetBodyFlag     = interceptorsGetFlags.String("body", "REQUIRED", "")
		interceptorsGetTenantIDFlag = interceptorsGetFlags.String("tenant-id", "REQUIRED", "Tenant ID for the request")
		interceptorsGetRecordIDFlag = interceptorsGetFlags.String("record-id", "REQUIRED", "ID of the record to retrieve")
		interceptorsGetAuthFlag     = interceptorsGetFlags.String("auth", "REQUIRED", "")

		interceptorsCreateFlags        = flag.NewFlagSet("create", flag.ExitOnError)
		interceptorsCreateBodyFlag     = interceptorsCreateFlags.String("body", "REQUIRED", "")
		interceptorsCreateTenantIDFlag = interceptorsCreateFlags.String("tenant-id", "REQUIRED", "Tenant ID for the request")
		interceptorsCreateAuthFlag     = interceptorsCreateFlags.String("auth", "REQUIRED", "")

		interceptorsStreamFlags        = flag.NewFlagSet("stream", flag.ExitOnError)
		interceptorsStreamTenantIDFlag = interceptorsStreamFlags.String("tenant-id", "REQUIRED", "Tenant ID for the request")
		interceptorsStreamAuthFlag     = interceptorsStreamFlags.String("auth", "REQUIRED", "")
	)
	interceptorsFlags.Usage = interceptorsUsage
	interceptorsGetFlags.Usage = interceptorsGetUsage
	interceptorsCreateFlags.Usage = interceptorsCreateUsage
	interceptorsStreamFlags.Usage = interceptorsStreamUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "interceptors":
			svcf = interceptorsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "interceptors":
			switch epn {
			case "get":
				epf = interceptorsGetFlags

			case "create":
				epf = interceptorsCreateFlags

			case "stream":
				epf = interceptorsStreamFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "interceptors":
			c := interceptorsc.NewClient(scheme, host, doer, enc, dec, restore, dialer, interceptorsConfigurer)
			switch epn {
			case "get":
				endpoint = c.Get()
				endpoint = interceptors.WrapGetClientEndpoint(endpoint, inter)
				data, err = interceptorsc.BuildGetPayload(*interceptorsGetBodyFlag, *interceptorsGetTenantIDFlag, *interceptorsGetRecordIDFlag, *interceptorsGetAuthFlag)
			case "create":
				endpoint = c.Create()
				endpoint = interceptors.WrapCreateClientEndpoint(endpoint, inter)
				data, err = interceptorsc.BuildCreatePayload(*interceptorsCreateBodyFlag, *interceptorsCreateTenantIDFlag, *interceptorsCreateAuthFlag)
			case "stream":
				endpoint = c.Stream()
				endpoint = interceptors.WrapStreamClientEndpoint(endpoint, inter)
				data, err = interceptorsc.BuildStreamPayload(*interceptorsStreamTenantIDFlag, *interceptorsStreamAuthFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// interceptorsUsage displays the usage of the interceptors command and its
// subcommands.
func interceptorsUsage() {
	fmt.Fprintf(os.Stderr, `The interceptors service demonstrates a comprehensive use of interceptors combining
	authentication, tenant validation, caching, audit logging, and retry mechanisms. It showcases
	both client-side and server-side interceptors working together to provide a robust service.
Usage:
    %[1]s [globalflags] interceptors COMMAND [flags]

COMMAND:
    get: Get retrieves a record by ID with all interceptors in action
    create: Create a new record with all interceptors in action
    stream: Stream records

Additional help:
    %[1]s interceptors COMMAND --help
`, os.Args[0])
}
func interceptorsGetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] interceptors get -body JSON -tenant-id STRING -record-id STRING -auth STRING

Get retrieves a record by ID with all interceptors in action
    -body JSON: 
    -tenant-id STRING: Tenant ID for the request
    -record-id STRING: ID of the record to retrieve
    -auth STRING: 

Example:
    %[1]s interceptors get --body '{
      "spanID": "3d14158e-229c-4a36-a10f-52399658e40f",
      "traceID": "5c269208-646a-4c82-ba7d-9b7a4406162b"
   }' --tenant-id "ffbd0a2e-136e-4fd2-8320-ce9e0fe84395" --record-id "8f0c3e58-e473-4231-92da-7d6c3917b26a" --auth "Ipsa tempora dolorem quasi."
`, os.Args[0])
}

func interceptorsCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] interceptors create -body JSON -tenant-id STRING -auth STRING

Create a new record with all interceptors in action
    -body JSON: 
    -tenant-id STRING: Tenant ID for the request
    -auth STRING: 

Example:
    %[1]s interceptors create --body '{
      "spanID": "4310df54-2c77-47dc-93de-ac96d587b947",
      "traceID": "a9d0301f-4d44-4047-bbe6-86a10c4c0b15",
      "value": "Et voluptatem voluptas consequuntur tempore velit optio."
   }' --tenant-id "702373c7-3a97-4919-8e69-ecf7d8dc6c21" --auth "Ut asperiores."
`, os.Args[0])
}

func interceptorsStreamUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] interceptors stream -tenant-id STRING -auth STRING

Stream records
    -tenant-id STRING: Tenant ID for the request
    -auth STRING: 

Example:
    %[1]s interceptors stream --tenant-id "61fca988-c0ac-46da-9c02-339afebeb192" --auth "Id ut quia quibusdam itaque dolor."
`, os.Args[0])
}
