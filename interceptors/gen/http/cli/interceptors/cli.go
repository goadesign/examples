// Code generated by goa v3.19.1, DO NOT EDIT.
//
// interceptors HTTP client CLI support package
//
// Command:
// $ goa gen goa.design/examples/interceptors/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	interceptorsc "goa.design/examples/interceptors/gen/http/interceptors/client"
	interceptors "goa.design/examples/interceptors/gen/interceptors"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `interceptors (get|create)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` interceptors get --body '{
      "spanID": "9c82b6c6-170b-4a8a-af64-32c4f79dec6f",
      "traceID": "ae190227-2887-4b9f-9262-36051d64f7fd"
   }' --tenant-id "be7e5e5d-a636-4c75-ad31-77dad296b99d" --record-id "60ed6c8a-c22a-4286-97c9-e35ff19b7615" --auth "Fuga asperiores sint."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
	inter interceptors.ClientInterceptors,
) (goa.Endpoint, any, error) {
	var (
		interceptorsFlags = flag.NewFlagSet("interceptors", flag.ContinueOnError)

		interceptorsGetFlags        = flag.NewFlagSet("get", flag.ExitOnError)
		interceptorsGetBodyFlag     = interceptorsGetFlags.String("body", "REQUIRED", "")
		interceptorsGetTenantIDFlag = interceptorsGetFlags.String("tenant-id", "REQUIRED", "Tenant ID for the request")
		interceptorsGetRecordIDFlag = interceptorsGetFlags.String("record-id", "REQUIRED", "ID of the record to retrieve")
		interceptorsGetAuthFlag     = interceptorsGetFlags.String("auth", "REQUIRED", "")

		interceptorsCreateFlags        = flag.NewFlagSet("create", flag.ExitOnError)
		interceptorsCreateBodyFlag     = interceptorsCreateFlags.String("body", "REQUIRED", "")
		interceptorsCreateTenantIDFlag = interceptorsCreateFlags.String("tenant-id", "REQUIRED", "Tenant ID for the request")
		interceptorsCreateAuthFlag     = interceptorsCreateFlags.String("auth", "REQUIRED", "")
	)
	interceptorsFlags.Usage = interceptorsUsage
	interceptorsGetFlags.Usage = interceptorsGetUsage
	interceptorsCreateFlags.Usage = interceptorsCreateUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "interceptors":
			svcf = interceptorsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "interceptors":
			switch epn {
			case "get":
				epf = interceptorsGetFlags

			case "create":
				epf = interceptorsCreateFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "interceptors":
			c := interceptorsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get":
				endpoint = c.Get()
				endpoint = interceptors.WrapGetClientEndpoint(endpoint, inter)
				data, err = interceptorsc.BuildGetPayload(*interceptorsGetBodyFlag, *interceptorsGetTenantIDFlag, *interceptorsGetRecordIDFlag, *interceptorsGetAuthFlag)
			case "create":
				endpoint = c.Create()
				endpoint = interceptors.WrapCreateClientEndpoint(endpoint, inter)
				data, err = interceptorsc.BuildCreatePayload(*interceptorsCreateBodyFlag, *interceptorsCreateTenantIDFlag, *interceptorsCreateAuthFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// interceptorsUsage displays the usage of the interceptors command and its
// subcommands.
func interceptorsUsage() {
	fmt.Fprintf(os.Stderr, `The interceptors service demonstrates a comprehensive use of interceptors combining
	authentication, tenant validation, caching, audit logging, and retry mechanisms. It showcases
	both client-side and server-side interceptors working together to provide a robust service.
Usage:
    %[1]s [globalflags] interceptors COMMAND [flags]

COMMAND:
    get: Get retrieves a record by ID with all interceptors in action
    create: Create a new record with all interceptors in action

Additional help:
    %[1]s interceptors COMMAND --help
`, os.Args[0])
}
func interceptorsGetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] interceptors get -body JSON -tenant-id STRING -record-id STRING -auth STRING

Get retrieves a record by ID with all interceptors in action
    -body JSON: 
    -tenant-id STRING: Tenant ID for the request
    -record-id STRING: ID of the record to retrieve
    -auth STRING: 

Example:
    %[1]s interceptors get --body '{
      "spanID": "9c82b6c6-170b-4a8a-af64-32c4f79dec6f",
      "traceID": "ae190227-2887-4b9f-9262-36051d64f7fd"
   }' --tenant-id "be7e5e5d-a636-4c75-ad31-77dad296b99d" --record-id "60ed6c8a-c22a-4286-97c9-e35ff19b7615" --auth "Fuga asperiores sint."
`, os.Args[0])
}

func interceptorsCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] interceptors create -body JSON -tenant-id STRING -auth STRING

Create a new record with all interceptors in action
    -body JSON: 
    -tenant-id STRING: Tenant ID for the request
    -auth STRING: 

Example:
    %[1]s interceptors create --body '{
      "spanID": "624adc57-e52c-4436-a5bd-a3b009450803",
      "traceID": "b87d0a57-3e1e-46cb-b2a4-ad8fd2004a09",
      "value": "Aut delectus et veritatis."
   }' --tenant-id "1b1318c7-6c60-4890-9aac-58c6b31affa3" --auth "Mollitia natus cumque dolore."
`, os.Args[0])
}
