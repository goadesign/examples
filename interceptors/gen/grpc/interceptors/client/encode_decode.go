// Code generated by goa v3.19.1, DO NOT EDIT.
//
// interceptors gRPC client encoders and decoders
//
// Command:
// $ goa gen goa.design/examples/interceptors/design

package client

import (
	"context"

	interceptorspb "goa.design/examples/interceptors/gen/grpc/interceptors/pb"
	interceptors "goa.design/examples/interceptors/gen/interceptors"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildGetFunc builds the remote method to invoke for "interceptors" service
// "get" endpoint.
func BuildGetFunc(grpccli interceptorspb.InterceptorsClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Get(ctx, reqpb.(*interceptorspb.GetRequest), opts...)
		}
		return grpccli.Get(ctx, &interceptorspb.GetRequest{}, opts...)
	}
}

// EncodeGetRequest encodes requests sent to interceptors get endpoint.
func EncodeGetRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*interceptors.GetPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("interceptors", "get", "*interceptors.GetPayload", v)
	}
	return NewProtoGetRequest(payload), nil
}

// DecodeGetResponse decodes responses from the interceptors get endpoint.
func DecodeGetResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*interceptorspb.GetResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("interceptors", "get", "*interceptorspb.GetResponse", v)
	}
	if err := ValidateGetResponse(message); err != nil {
		return nil, err
	}
	res := NewGetResult(message)
	return res, nil
}
