// Code generated by goa v3.22.3, DO NOT EDIT.
//
// interceptors gRPC client CLI support package
//
// Command:
// $ goa gen goa.design/examples/interceptors/design

package client

import (
	"encoding/json"
	"fmt"

	interceptorspb "goa.design/examples/interceptors/gen/grpc/interceptors/pb"
	interceptors "goa.design/examples/interceptors/gen/interceptors"
)

// BuildGetPayload builds the payload for the interceptors get endpoint from
// CLI flags.
func BuildGetPayload(interceptorsGetMessage string) (*interceptors.GetPayload, error) {
	var err error
	var message interceptorspb.GetRequest
	{
		if interceptorsGetMessage != "" {
			err = json.Unmarshal([]byte(interceptorsGetMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"auth\": \"Exercitationem vitae ipsum molestiae.\",\n      \"recordID\": \"b39b771d-1348-4566-bde1-e935e7a128c7\",\n      \"spanID\": \"b39b771d-1348-4566-bde1-e935e7a128c7\",\n      \"tenantID\": \"b39b771d-1348-4566-bde1-e935e7a128c7\",\n      \"traceID\": \"b39b771d-1348-4566-bde1-e935e7a128c7\"\n   }'")
			}
		}
	}
	v := &interceptors.GetPayload{
		TenantID: interceptors.UUID(message.TenantId),
		RecordID: interceptors.UUID(message.RecordId),
		Auth:     message.Auth,
	}
	if message.TraceId != nil {
		traceID := interceptors.UUID(*message.TraceId)
		v.TraceID = &traceID
	}
	if message.SpanId != nil {
		spanID := interceptors.UUID(*message.SpanId)
		v.SpanID = &spanID
	}

	return v, nil
}
