// Code generated by goa v3.19.1, DO NOT EDIT.
//
// interceptors gRPC client types
//
// Command:
// $ goa gen goa.design/examples/interceptors/design

package client

import (
	interceptorspb "goa.design/examples/interceptors/gen/grpc/interceptors/pb"
	interceptors "goa.design/examples/interceptors/gen/interceptors"
	goa "goa.design/goa/v3/pkg"
)

// NewProtoGetRequest builds the gRPC request type from the payload of the
// "get" endpoint of the "interceptors" service.
func NewProtoGetRequest(payload *interceptors.GetPayload) *interceptorspb.GetRequest {
	message := &interceptorspb.GetRequest{
		TenantId: string(payload.TenantID),
		RecordId: string(payload.RecordID),
		Auth:     payload.Auth,
	}
	if payload.TraceID != nil {
		traceID := string(*payload.TraceID)
		message.TraceId = &traceID
	}
	if payload.SpanID != nil {
		spanID := string(*payload.SpanID)
		message.SpanId = &spanID
	}
	return message
}

// NewGetResult builds the result type of the "get" endpoint of the
// "interceptors" service from the gRPC response type.
func NewGetResult(message *interceptorspb.GetResponse) *interceptors.GetResult {
	result := &interceptors.GetResult{
		ID:          interceptors.UUID(message.Id),
		Value:       message.Value,
		Tenant:      message.Tenant,
		Status:      int(message.Status),
		ProcessedAt: message.ProcessedAt,
		Duration:    int(message.Duration),
		CachedAt:    message.CachedAt,
	}
	if message.RetryCount != nil {
		retryCount := int(*message.RetryCount)
		result.RetryCount = &retryCount
	}
	if message.RetryDuration != nil {
		retryDuration := int(*message.RetryDuration)
		result.RetryDuration = &retryDuration
	}
	return result
}

// ValidateGetResponse runs the validations defined on GetResponse.
func ValidateGetResponse(message *interceptorspb.GetResponse) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("message.id", string(message.Id), goa.FormatUUID))
	return
}
