// Code generated by goa v3.19.1, DO NOT EDIT.
//
// interceptors gRPC server encoders and decoders
//
// Command:
// $ goa gen goa.design/examples/interceptors/design

package server

import (
	"context"

	interceptorspb "goa.design/examples/interceptors/gen/grpc/interceptors/pb"
	interceptors "goa.design/examples/interceptors/gen/interceptors"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeGetResponse encodes responses from the "interceptors" service "get"
// endpoint.
func EncodeGetResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*interceptors.GetResult)
	if !ok {
		return nil, goagrpc.ErrInvalidType("interceptors", "get", "*interceptors.GetResult", v)
	}
	resp := NewProtoGetResponse(result)
	return resp, nil
}

// DecodeGetRequest decodes requests sent to "interceptors" service "get"
// endpoint.
func DecodeGetRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *interceptorspb.GetRequest
		ok      bool
	)
	{
		if message, ok = v.(*interceptorspb.GetRequest); !ok {
			return nil, goagrpc.ErrInvalidType("interceptors", "get", "*interceptorspb.GetRequest", v)
		}
		if err := ValidateGetRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *interceptors.GetPayload
	{
		payload = NewGetPayload(message)
	}
	return payload, nil
}
