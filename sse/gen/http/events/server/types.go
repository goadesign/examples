// Code generated by goa v3.20.0, DO NOT EDIT.
//
// events HTTP server types
//
// Command:
// $ goa gen goa.design/examples/sse/design

package server

import (
	events "goa.design/examples/sse/gen/events"
	goa "goa.design/goa/v3/pkg"
)

// TriggerRequestBody is the type of the "events" service "trigger" endpoint
// HTTP request body.
type TriggerRequestBody struct {
	// Message to broadcast
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// TriggerResponseBody is the type of the "events" service "trigger" endpoint
// HTTP response body.
type TriggerResponseBody struct {
	// Status of the operation
	Status string `form:"status" json:"status" xml:"status"`
}

// NewTriggerResponseBody builds the HTTP response body from the result of the
// "trigger" endpoint of the "events" service.
func NewTriggerResponseBody(res *events.TriggerResult) *TriggerResponseBody {
	body := &TriggerResponseBody{
		Status: res.Status,
	}
	return body
}

// NewTriggerPayload builds a events service trigger endpoint payload.
func NewTriggerPayload(body *TriggerRequestBody) *events.TriggerPayload {
	v := &events.TriggerPayload{
		Message: *body.Message,
	}

	return v
}

// ValidateTriggerRequestBody runs the validations defined on TriggerRequestBody
func ValidateTriggerRequestBody(body *TriggerRequestBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}
