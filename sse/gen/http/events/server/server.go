// Code generated by goa v3.20.0, DO NOT EDIT.
//
// events HTTP server
//
// Command:
// $ goa gen goa.design/examples/sse/design

package server

import (
	"bufio"
	"context"
	"io"
	"net/http"
	"path"

	events "goa.design/examples/sse/gen/events"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the events service endpoint HTTP handlers.
type Server struct {
	Mounts  []*MountPoint
	Stream  http.Handler
	Trigger http.Handler
	Public  http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the events service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *events.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
	fileSystemPublic http.FileSystem,
) *Server {
	if fileSystemPublic == nil {
		fileSystemPublic = http.Dir(".")
	}
	fileSystemPublic = appendPrefix(fileSystemPublic, "/public")
	return &Server{
		Mounts: []*MountPoint{
			{"Stream", "GET", "/events/stream"},
			{"Trigger", "POST", "/events/trigger"},
			{"Serve public", "GET", "/"},
		},
		Stream:  NewStreamHandler(e.Stream, mux, decoder, encoder, errhandler, formatter),
		Trigger: NewTriggerHandler(e.Trigger, mux, decoder, encoder, errhandler, formatter),
		Public:  http.FileServer(fileSystemPublic),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "events" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.Stream = m(s.Stream)
	s.Trigger = m(s.Trigger)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return events.MethodNames[:] }

// Mount configures the mux to serve the events endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountStreamHandler(mux, h.Stream)
	MountTriggerHandler(mux, h.Trigger)
	MountPublic(mux, h.Public)
}

// Mount configures the mux to serve the events endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountStreamHandler configures the mux to serve the "events" service "stream"
// endpoint.
func MountStreamHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/events/stream", f)
}

// NewStreamHandler creates a HTTP handler which loads the HTTP request and
// calls the "events" service "stream" endpoint.
func NewStreamHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeStreamResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "stream")
		ctx = context.WithValue(ctx, goa.ServiceKey, "events")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		o := res.(*events.StreamResponseData)
		defer o.Body.Close()
		if wt, ok := o.Body.(io.WriterTo); ok {
			if err := encodeResponse(ctx, w, res); err != nil {
				errhandler(ctx, w, err)
				return
			}
			n, err := wt.WriteTo(w)
			if err != nil {
				if n == 0 {
					if err := encodeError(ctx, w, err); err != nil {
						errhandler(ctx, w, err)
					}
				} else {
					if f, ok := w.(http.Flusher); ok {
						f.Flush()
					}
					panic(http.ErrAbortHandler) // too late to write an error
				}
			}
			return
		}
		// handle immediate read error like a returned error
		buf := bufio.NewReader(o.Body)
		if _, err := buf.Peek(1); err != nil && err != io.EOF {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
			return
		}
		if _, err := io.Copy(w, buf); err != nil {
			if f, ok := w.(http.Flusher); ok {
				f.Flush()
			}
			panic(http.ErrAbortHandler) // too late to write an error
		}
	})
}

// MountTriggerHandler configures the mux to serve the "events" service
// "trigger" endpoint.
func MountTriggerHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/events/trigger", f)
}

// NewTriggerHandler creates a HTTP handler which loads the HTTP request and
// calls the "events" service "trigger" endpoint.
func NewTriggerHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeTriggerRequest(mux, decoder)
		encodeResponse = EncodeTriggerResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "trigger")
		ctx = context.WithValue(ctx, goa.ServiceKey, "events")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// appendFS is a custom implementation of fs.FS that appends a specified prefix
// to the file paths before delegating the Open call to the underlying fs.FS.
type appendFS struct {
	prefix string
	fs     http.FileSystem
}

// Open opens the named file, appending the prefix to the file path before
// passing it to the underlying fs.FS.
func (s appendFS) Open(name string) (http.File, error) {
	switch name {
	}
	return s.fs.Open(path.Join(s.prefix, name))
}

// appendPrefix returns a new fs.FS that appends the specified prefix to file paths
// before delegating to the provided embed.FS.
func appendPrefix(fsys http.FileSystem, prefix string) http.FileSystem {
	return appendFS{prefix: prefix, fs: fsys}
}

// MountPublic configures the mux to serve GET request made to "/".
func MountPublic(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/", h.ServeHTTP)
	mux.Handle("GET", "/{*filepath}", h.ServeHTTP)
}
