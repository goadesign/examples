// Code generated by goa v3.20.0, DO NOT EDIT.
//
// events HTTP client types
//
// Command:
// $ goa gen goa.design/examples/sse/design

package client

import (
	events "goa.design/examples/sse/gen/events"
	goa "goa.design/goa/v3/pkg"
)

// TriggerRequestBody is the type of the "events" service "trigger" endpoint
// HTTP request body.
type TriggerRequestBody struct {
	// Message to broadcast
	Message string `form:"message" json:"message" xml:"message"`
}

// TriggerResponseBody is the type of the "events" service "trigger" endpoint
// HTTP response body.
type TriggerResponseBody struct {
	// Status of the operation
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// NewTriggerRequestBody builds the HTTP request body from the payload of the
// "trigger" endpoint of the "events" service.
func NewTriggerRequestBody(p *events.TriggerPayload) *TriggerRequestBody {
	body := &TriggerRequestBody{
		Message: p.Message,
	}
	return body
}

// NewTriggerResultOK builds a "events" service "trigger" endpoint result from
// a HTTP "OK" response.
func NewTriggerResultOK(body *TriggerResponseBody) *events.TriggerResult {
	v := &events.TriggerResult{
		Status: *body.Status,
	}

	return v
}

// ValidateTriggerResponseBody runs the validations defined on
// TriggerResponseBody
func ValidateTriggerResponseBody(body *TriggerResponseBody) (err error) {
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	return
}
