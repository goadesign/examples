// Code generated by goa v3.20.0, DO NOT EDIT.
//
// events client HTTP transport
//
// Command:
// $ goa gen goa.design/examples/sse/design

package client

import (
	"context"
	"net/http"

	events "goa.design/examples/sse/gen/events"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the events service endpoint HTTP clients.
type Client struct {
	// Stream Doer is the HTTP client used to make requests to the stream endpoint.
	StreamDoer goahttp.Doer

	// Trigger Doer is the HTTP client used to make requests to the trigger
	// endpoint.
	TriggerDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the events service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		StreamDoer:          doer,
		TriggerDoer:         doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// Stream returns an endpoint that makes HTTP requests to the events service
// stream server.
func (c *Client) Stream() goa.Endpoint {
	var (
		decodeResponse = DecodeStreamResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildStreamRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.StreamDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("events", "stream", err)
		}
		_, err = decodeResponse(resp)
		if err != nil {
			resp.Body.Close()
			return nil, err
		}
		return &events.StreamResponseData{Body: resp.Body}, nil
	}
}

// Trigger returns an endpoint that makes HTTP requests to the events service
// trigger server.
func (c *Client) Trigger() goa.Endpoint {
	var (
		encodeRequest  = EncodeTriggerRequest(c.encoder)
		decodeResponse = DecodeTriggerResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildTriggerRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.TriggerDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("events", "trigger", err)
		}
		return decodeResponse(resp)
	}
}
