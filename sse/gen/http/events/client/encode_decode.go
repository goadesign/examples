// Code generated by goa v3.20.0, DO NOT EDIT.
//
// events HTTP client encoders and decoders
//
// Command:
// $ goa gen goa.design/examples/sse/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	events "goa.design/examples/sse/gen/events"
	goahttp "goa.design/goa/v3/http"
)

// BuildStreamRequest instantiates a HTTP request object with method and path
// set to call the "events" service "stream" endpoint
func (c *Client) BuildStreamRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: StreamEventsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("events", "stream", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeStreamResponse returns a decoder for responses returned by the events
// stream endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeStreamResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("events", "stream", resp.StatusCode, string(body))
		}
	}
}

// BuildTriggerRequest instantiates a HTTP request object with method and path
// set to call the "events" service "trigger" endpoint
func (c *Client) BuildTriggerRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: TriggerEventsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("events", "trigger", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeTriggerRequest returns an encoder for requests sent to the events
// trigger server.
func EncodeTriggerRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*events.TriggerPayload)
		if !ok {
			return goahttp.ErrInvalidType("events", "trigger", "*events.TriggerPayload", v)
		}
		body := NewTriggerRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("events", "trigger", err)
		}
		return nil
	}
}

// DecodeTriggerResponse returns a decoder for responses returned by the events
// trigger endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeTriggerResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body TriggerResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("events", "trigger", err)
			}
			err = ValidateTriggerResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("events", "trigger", err)
			}
			res := NewTriggerResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("events", "trigger", resp.StatusCode, string(body))
		}
	}
}
