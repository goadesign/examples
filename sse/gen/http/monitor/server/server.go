// Code generated by goa v3.20.1, DO NOT EDIT.
//
// monitor HTTP server
//
// Command:
// $ goa gen goa.design/examples/sse/design

package server

import (
	"context"
	"net/http"
	"path"

	monitor "goa.design/examples/sse/gen/monitor"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the monitor service endpoint HTTP handlers.
type Server struct {
	Mounts  []*MountPoint
	Monitor http.Handler
	Public  http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the monitor service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *monitor.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
	fileSystemPublic http.FileSystem,
) *Server {
	if fileSystemPublic == nil {
		fileSystemPublic = http.Dir(".")
	}
	fileSystemPublic = appendPrefix(fileSystemPublic, "/public")
	return &Server{
		Mounts: []*MountPoint{
			{"Monitor", "GET", "/monitor"},
			{"Serve public", "GET", "/"},
		},
		Monitor: NewMonitorHandler(e.Monitor, mux, decoder, encoder, errhandler, formatter),
		Public:  http.FileServer(fileSystemPublic),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "monitor" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.Monitor = m(s.Monitor)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return monitor.MethodNames[:] }

// Mount configures the mux to serve the monitor endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountMonitorHandler(mux, h.Monitor)
	MountPublic(mux, h.Public)
}

// Mount configures the mux to serve the monitor endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountMonitorHandler configures the mux to serve the "monitor" service
// "monitor" endpoint.
func MountMonitorHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/monitor", f)
}

// NewMonitorHandler creates a HTTP handler which loads the HTTP request and
// calls the "monitor" service "monitor" endpoint.
func NewMonitorHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeError = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "monitor")
		ctx = context.WithValue(ctx, goa.ServiceKey, "monitor")
		var err error
		v := &monitor.MonitorEndpointInput{
			Stream: &MonitorServerStream{
				w: w,
				r: r,
			},
		}
		_, err = endpoint(ctx, v)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
	})
}

// appendFS is a custom implementation of fs.FS that appends a specified prefix
// to the file paths before delegating the Open call to the underlying fs.FS.
type appendFS struct {
	prefix string
	fs     http.FileSystem
}

// Open opens the named file, appending the prefix to the file path before
// passing it to the underlying fs.FS.
func (s appendFS) Open(name string) (http.File, error) {
	switch name {
	}
	return s.fs.Open(path.Join(s.prefix, name))
}

// appendPrefix returns a new fs.FS that appends the specified prefix to file paths
// before delegating to the provided embed.FS.
func appendPrefix(fsys http.FileSystem, prefix string) http.FileSystem {
	return appendFS{prefix: prefix, fs: fsys}
}

// MountPublic configures the mux to serve GET request made to "/".
func MountPublic(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/", h.ServeHTTP)
	mux.Handle("GET", "/{*filepath}", h.ServeHTTP)
}
