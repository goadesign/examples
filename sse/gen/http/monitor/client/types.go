// Code generated by goa v3.20.1, DO NOT EDIT.
//
// monitor HTTP client types
//
// Command:
// $ goa gen goa.design/examples/sse/design

package client

import (
	monitor "goa.design/examples/sse/gen/monitor"
	goa "goa.design/goa/v3/pkg"
)

// MonitorResponseBody is the type of the "monitor" service "monitor" endpoint
// HTTP response body.
type MonitorResponseBody struct {
	// Timestamp of the usage report
	Timestamp *string `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	// CPU usage percentage
	CPU *int `form:"cpu,omitempty" json:"cpu,omitempty" xml:"cpu,omitempty"`
	// Memory usage percentage
	Memory *int `form:"memory,omitempty" json:"memory,omitempty" xml:"memory,omitempty"`
}

// NewMonitorUsageOK builds a "monitor" service "monitor" endpoint result from
// a HTTP "OK" response.
func NewMonitorUsageOK(body *MonitorResponseBody) *monitor.Usage {
	v := &monitor.Usage{
		Timestamp: *body.Timestamp,
		CPU:       *body.CPU,
		Memory:    *body.Memory,
	}

	return v
}

// ValidateMonitorResponseBody runs the validations defined on
// MonitorResponseBody
func ValidateMonitorResponseBody(body *MonitorResponseBody) (err error) {
	if body.Timestamp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timestamp", "body"))
	}
	if body.CPU == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cpu", "body"))
	}
	if body.Memory == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("memory", "body"))
	}
	if body.Timestamp != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.timestamp", *body.Timestamp, goa.FormatDateTime))
	}
	return
}
