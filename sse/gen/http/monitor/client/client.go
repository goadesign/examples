// Code generated by goa v3.20.1, DO NOT EDIT.
//
// monitor client HTTP transport
//
// Command:
// $ goa gen goa.design/examples/sse/design

package client

import (
	"context"
	"fmt"
	"net/http"
	"strings"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the monitor service endpoint HTTP clients.
type Client struct {
	// Monitor Doer is the HTTP client used to make requests to the monitor
	// endpoint.
	MonitorDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the monitor service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		MonitorDoer:         doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// Monitor returns an endpoint that makes HTTP requests to the monitor service
// monitor server.
func (c *Client) Monitor() goa.Endpoint {
	var ()
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildMonitorRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		// For SSE endpoints, connect and return a stream
		resp, err := c.MonitorDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("monitor", "monitor", err)
		}

		if resp.StatusCode != http.StatusOK {
			resp.Body.Close()
			return nil, fmt.Errorf("unexpected status from SSE endpoint: %d", resp.StatusCode)
		}

		contentType := resp.Header.Get("Content-Type")
		if contentType != "" && !strings.HasPrefix(contentType, "text/event-stream") {
			resp.Body.Close()
			return nil, fmt.Errorf("unexpected content type: %s (expected text/event-stream)", contentType)
		}

		return NewMonitorStream(resp), nil
	}
}
