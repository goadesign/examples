// Code generated by goa v3.20.0, DO NOT EDIT.
//
// events HTTP client CLI support package
//
// Command:
// $ goa gen goa.design/examples/sse/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	eventsc "goa.design/examples/sse/gen/http/events/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `events (stream|trigger)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` events stream` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		eventsFlags = flag.NewFlagSet("events", flag.ContinueOnError)

		eventsStreamFlags = flag.NewFlagSet("stream", flag.ExitOnError)

		eventsTriggerFlags    = flag.NewFlagSet("trigger", flag.ExitOnError)
		eventsTriggerBodyFlag = eventsTriggerFlags.String("body", "REQUIRED", "")
	)
	eventsFlags.Usage = eventsUsage
	eventsStreamFlags.Usage = eventsStreamUsage
	eventsTriggerFlags.Usage = eventsTriggerUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "events":
			svcf = eventsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "events":
			switch epn {
			case "stream":
				epf = eventsStreamFlags

			case "trigger":
				epf = eventsTriggerFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "events":
			c := eventsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "stream":
				endpoint = c.Stream()
			case "trigger":
				endpoint = c.Trigger()
				data, err = eventsc.BuildTriggerPayload(*eventsTriggerBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// eventsUsage displays the usage of the events command and its subcommands.
func eventsUsage() {
	fmt.Fprintf(os.Stderr, `The events service provides real-time updates via SSE
Usage:
    %[1]s [globalflags] events COMMAND [flags]

COMMAND:
    stream: Stream events using Server-Sent Events
    trigger: Trigger a new event to be sent to all connected clients

Additional help:
    %[1]s events COMMAND --help
`, os.Args[0])
}
func eventsStreamUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] events stream

Stream events using Server-Sent Events

Example:
    %[1]s events stream
`, os.Args[0])
}

func eventsTriggerUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] events trigger -body JSON

Trigger a new event to be sent to all connected clients
    -body JSON: 

Example:
    %[1]s events trigger --body '{
      "message": "Something happened!"
   }'
`, os.Args[0])
}
