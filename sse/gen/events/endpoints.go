// Code generated by goa v3.20.0, DO NOT EDIT.
//
// events endpoints
//
// Command:
// $ goa gen goa.design/examples/sse/design

package events

import (
	"context"
	"io"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "events" service endpoints.
type Endpoints struct {
	Stream  goa.Endpoint
	Trigger goa.Endpoint
}

// StreamResponseData holds both the result and the HTTP response body reader
// of the "stream" method.
type StreamResponseData struct {
	// Body streams the HTTP response body.
	Body io.ReadCloser
}

// NewEndpoints wraps the methods of the "events" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Stream:  NewStreamEndpoint(s),
		Trigger: NewTriggerEndpoint(s),
	}
}

// Use applies the given middleware to all the "events" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Stream = m(e.Stream)
	e.Trigger = m(e.Trigger)
}

// NewStreamEndpoint returns an endpoint function that calls the method
// "stream" of service "events".
func NewStreamEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		body, err := s.Stream(ctx)
		if err != nil {
			return nil, err
		}
		return &StreamResponseData{Body: body}, nil
	}
}

// NewTriggerEndpoint returns an endpoint function that calls the method
// "trigger" of service "events".
func NewTriggerEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*TriggerPayload)
		return s.Trigger(ctx, p)
	}
}
