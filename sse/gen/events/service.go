// Code generated by goa v3.20.0, DO NOT EDIT.
//
// events service
//
// Command:
// $ goa gen goa.design/examples/sse/design

package events

import (
	"context"
	"io"
)

// The events service provides real-time updates via SSE
type Service interface {
	// Stream events using Server-Sent Events

	// If body implements [io.WriterTo], that implementation will be used instead.
	// Consider [goa.design/goa/v3/pkg.SkipResponseWriter] to adapt existing
	// implementations.
	Stream(context.Context) (body io.ReadCloser, err error)
	// Trigger a new event to be sent to all connected clients
	Trigger(context.Context, *TriggerPayload) (res *TriggerResult, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "events"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "events"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"stream", "trigger"}

// TriggerPayload is the payload type of the events service trigger method.
type TriggerPayload struct {
	// Message to broadcast
	Message string
}

// TriggerResult is the result type of the events service trigger method.
type TriggerResult struct {
	// Status of the operation
	Status string
}
