// Code generated by goa v3.20.0, DO NOT EDIT.
//
// events client
//
// Command:
// $ goa gen goa.design/examples/sse/design

package events

import (
	"context"
	"io"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "events" service client.
type Client struct {
	StreamEndpoint  goa.Endpoint
	TriggerEndpoint goa.Endpoint
}

// NewClient initializes a "events" service client given the endpoints.
func NewClient(stream, trigger goa.Endpoint) *Client {
	return &Client{
		StreamEndpoint:  stream,
		TriggerEndpoint: trigger,
	}
}

// Stream calls the "stream" endpoint of the "events" service.
func (c *Client) Stream(ctx context.Context) (resp io.ReadCloser, err error) {
	var ires any
	ires, err = c.StreamEndpoint(ctx, nil)
	if err != nil {
		return
	}
	o := ires.(*StreamResponseData)
	return o.Body, nil
}

// Trigger calls the "trigger" endpoint of the "events" service.
func (c *Client) Trigger(ctx context.Context, p *TriggerPayload) (res *TriggerResult, err error) {
	var ires any
	ires, err = c.TriggerEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*TriggerResult), nil
}
