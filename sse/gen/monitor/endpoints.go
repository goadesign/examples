// Code generated by goa v3.20.1, DO NOT EDIT.
//
// monitor endpoints
//
// Command:
// $ goa gen goa.design/examples/sse/design

package monitor

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "monitor" service endpoints.
type Endpoints struct {
	Monitor goa.Endpoint
}

// MonitorEndpointInput holds both the payload and the server stream of the
// "monitor" method.
type MonitorEndpointInput struct {
	// Stream is the server stream used by the "monitor" method to send data.
	Stream MonitorServerStream
}

// NewEndpoints wraps the methods of the "monitor" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Monitor: NewMonitorEndpoint(s),
	}
}

// Use applies the given middleware to all the "monitor" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Monitor = m(e.Monitor)
}

// NewMonitorEndpoint returns an endpoint function that calls the method
// "monitor" of service "monitor".
func NewMonitorEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		ep := req.(*MonitorEndpointInput)
		return nil, s.Monitor(ctx, ep.Stream)
	}
}
