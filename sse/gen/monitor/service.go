// Code generated by goa v3.22.3, DO NOT EDIT.
//
// monitor service
//
// Command:
// $ goa gen goa.design/examples/sse/design

package monitor

import (
	"context"
)

// The monitor service provides real-time system monitoring via SSE
type Service interface {
	// Monitor CPU and memory usage via Server-Sent Events
	Monitor(context.Context, MonitorServerStream) (err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "monitor"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "monitor"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"monitor"}

// MonitorServerStream allows streaming instances of *Usage to the client.
type MonitorServerStream interface {
	// Send streams instances of "Usage".
	Send(*Usage) error
	SendWithContext(context.Context, *Usage) error
	// Close closes the stream.
	Close() error
}

// MonitorClientStream allows streaming instances of *Usage to the client.
type MonitorClientStream interface {
	Recv() (*Usage, error)
	RecvWithContext(context.Context) (*Usage, error)
}

// Usage is the result type of the monitor service monitor method.
type Usage struct {
	// Timestamp of the usage report
	Timestamp string
	// CPU usage percentage
	CPU int
	// Memory usage percentage
	Memory int
}
