// Code generated by goa v3.6.0, DO NOT EDIT.
//
// tus HTTP client encoders and decoders
//
// Command:
// $ goa gen goa.design/examples/tus/design -o
// $(GOPATH)/src/goa.design/examples/tus

package client

import (
	"bytes"
	"context"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"os"
	"strconv"

	tus "goa.design/examples/tus/gen/tus"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildHeadRequest instantiates a HTTP request object with method and path set
// to call the "tus" service "head" endpoint
func (c *Client) BuildHeadRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*tus.HeadPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("tus", "head", "*tus.HeadPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: HeadTusPath(id)}
	req, err := http.NewRequest("HEAD", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tus", "head", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeHeadRequest returns an encoder for requests sent to the tus head
// server.
func EncodeHeadRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*tus.HeadPayload)
		if !ok {
			return goahttp.ErrInvalidType("tus", "head", "*tus.HeadPayload", v)
		}
		{
			head := p.TusResumable
			req.Header.Set("Tus-Resumable", head)
		}
		return nil
	}
}

// DecodeHeadResponse returns a decoder for responses returned by the tus head
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
// DecodeHeadResponse may return the following errors:
//	- "NotFound" (type *goa.ServiceError): http.StatusNotFound
//	- "Gone" (type *goa.ServiceError): http.StatusGone
//	- "InvalidTusResumable" (type *tus.ErrInvalidTUSResumable): http.StatusPreconditionFailed
//	- error: internal error
func DecodeHeadResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				tusResumable      string
				uploadOffset      int64
				uploadLength      *int64
				uploadDeferLength *int
				uploadMetadata    *string
				err               error
			)
			tusResumableRaw := resp.Header.Get("Tus-Resumable")
			if tusResumableRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("Tus-Resumable", "header"))
			}
			tusResumable = tusResumableRaw
			err = goa.MergeErrors(err, goa.ValidatePattern("tusResumable", tusResumable, "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(-(0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(\\.(0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*)?(\\+[0-9a-zA-Z-]+(\\.[0-9a-zA-Z-]+)*)?$"))
			{
				uploadOffsetRaw := resp.Header.Get("Upload-Offset")
				if uploadOffsetRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "head", goa.MissingFieldError("Upload-Offset", "header"))
				}
				v, err2 := strconv.ParseInt(uploadOffsetRaw, 10, 64)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("uploadOffset", uploadOffsetRaw, "integer"))
				}
				uploadOffset = v
			}
			{
				uploadLengthRaw := resp.Header.Get("Upload-Length")
				if uploadLengthRaw != "" {
					v, err2 := strconv.ParseInt(uploadLengthRaw, 10, 64)
					if err2 != nil {
						err = goa.MergeErrors(err, goa.InvalidFieldTypeError("uploadLength", uploadLengthRaw, "integer"))
					}
					uploadLength = &v
				}
			}
			{
				uploadDeferLengthRaw := resp.Header.Get("Upload-Defer-Length")
				if uploadDeferLengthRaw != "" {
					v, err2 := strconv.ParseInt(uploadDeferLengthRaw, 10, strconv.IntSize)
					if err2 != nil {
						err = goa.MergeErrors(err, goa.InvalidFieldTypeError("uploadDeferLength", uploadDeferLengthRaw, "integer"))
					}
					pv := int(v)
					uploadDeferLength = &pv
				}
			}
			if uploadDeferLength != nil {
				if !(*uploadDeferLength == 1) {
					err = goa.MergeErrors(err, goa.InvalidEnumValueError("uploadDeferLength", *uploadDeferLength, []interface{}{1}))
				}
			}
			uploadMetadataRaw := resp.Header.Get("Upload-Metadata")
			if uploadMetadataRaw != "" {
				uploadMetadata = &uploadMetadataRaw
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("tus", "head", err)
			}
			res := NewHeadResultOK(tusResumable, uploadOffset, uploadLength, uploadDeferLength, uploadMetadata)
			return res, nil
		case http.StatusNotFound:
			var (
				name      string
				id        string
				message   string
				temporary bool
				timeout   bool
				fault     bool
				err       error
			)
			nameRaw := resp.Header.Get("Goa-Attribute-Name")
			if nameRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-name", "header"))
			}
			name = nameRaw
			idRaw := resp.Header.Get("Goa-Attribute-Id")
			if idRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-id", "header"))
			}
			id = idRaw
			messageRaw := resp.Header.Get("Goa-Attribute-Message")
			if messageRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-message", "header"))
			}
			message = messageRaw
			{
				temporaryRaw := resp.Header.Get("Goa-Attribute-Temporary")
				if temporaryRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "head", goa.MissingFieldError("goa-attribute-temporary", "header"))
				}
				v, err2 := strconv.ParseBool(temporaryRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("temporary", temporaryRaw, "boolean"))
				}
				temporary = v
			}
			{
				timeoutRaw := resp.Header.Get("Goa-Attribute-Timeout")
				if timeoutRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "head", goa.MissingFieldError("goa-attribute-timeout", "header"))
				}
				v, err2 := strconv.ParseBool(timeoutRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("timeout", timeoutRaw, "boolean"))
				}
				timeout = v
			}
			{
				faultRaw := resp.Header.Get("Goa-Attribute-Fault")
				if faultRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "head", goa.MissingFieldError("goa-attribute-fault", "header"))
				}
				v, err2 := strconv.ParseBool(faultRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("fault", faultRaw, "boolean"))
				}
				fault = v
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("tus", "head", err)
			}
			return nil, NewHeadNotFound(name, id, message, temporary, timeout, fault)
		case http.StatusGone:
			var (
				name      string
				id        string
				message   string
				temporary bool
				timeout   bool
				fault     bool
				err       error
			)
			nameRaw := resp.Header.Get("Goa-Attribute-Name")
			if nameRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-name", "header"))
			}
			name = nameRaw
			idRaw := resp.Header.Get("Goa-Attribute-Id")
			if idRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-id", "header"))
			}
			id = idRaw
			messageRaw := resp.Header.Get("Goa-Attribute-Message")
			if messageRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-message", "header"))
			}
			message = messageRaw
			{
				temporaryRaw := resp.Header.Get("Goa-Attribute-Temporary")
				if temporaryRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "head", goa.MissingFieldError("goa-attribute-temporary", "header"))
				}
				v, err2 := strconv.ParseBool(temporaryRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("temporary", temporaryRaw, "boolean"))
				}
				temporary = v
			}
			{
				timeoutRaw := resp.Header.Get("Goa-Attribute-Timeout")
				if timeoutRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "head", goa.MissingFieldError("goa-attribute-timeout", "header"))
				}
				v, err2 := strconv.ParseBool(timeoutRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("timeout", timeoutRaw, "boolean"))
				}
				timeout = v
			}
			{
				faultRaw := resp.Header.Get("Goa-Attribute-Fault")
				if faultRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "head", goa.MissingFieldError("goa-attribute-fault", "header"))
				}
				v, err2 := strconv.ParseBool(faultRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("fault", faultRaw, "boolean"))
				}
				fault = v
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("tus", "head", err)
			}
			return nil, NewHeadGone(name, id, message, temporary, timeout, fault)
		case http.StatusPreconditionFailed:
			var (
				tusVersion string
				err        error
			)
			tusVersionRaw := resp.Header.Get("Tus-Version")
			if tusVersionRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("Tus-Version", "header"))
			}
			tusVersion = tusVersionRaw
			if !(tusVersion == "1.0.0") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("tusVersion", tusVersion, []interface{}{"1.0.0"}))
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("tus", "head", err)
			}
			return nil, NewHeadInvalidTusResumable(tusVersion)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tus", "head", resp.StatusCode, string(body))
		}
	}
}

// BuildPatchRequest instantiates a HTTP request object with method and path
// set to call the "tus" service "patch" endpoint
func (c *Client) BuildPatchRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id   string
		body io.Reader
	)
	{
		rd, ok := v.(*tus.PatchRequestData)
		if !ok {
			return nil, goahttp.ErrInvalidType("tus", "patch", "tus.PatchRequestData", v)
		}
		p := rd.Payload
		body = rd.Body
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: PatchTusPath(id)}
	req, err := http.NewRequest("PATCH", u.String(), body)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tus", "patch", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodePatchRequest returns an encoder for requests sent to the tus patch
// server.
func EncodePatchRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		data, ok := v.(*tus.PatchRequestData)
		if !ok {
			return goahttp.ErrInvalidType("tus", "patch", "*tus.PatchRequestData", v)
		}
		p := data.Payload
		{
			head := p.TusResumable
			req.Header.Set("Tus-Resumable", head)
		}
		{
			head := p.UploadOffset
			headStr := strconv.FormatInt(head, 10)
			req.Header.Set("Upload-Offset", headStr)
		}
		if p.UploadChecksum != nil {
			head := *p.UploadChecksum
			req.Header.Set("Upload-Checksum", head)
		}
		return nil
	}
}

// DecodePatchResponse returns a decoder for responses returned by the tus
// patch endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodePatchResponse may return the following errors:
//	- "InvalidContentType" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//	- "InvalidOffset" (type *goa.ServiceError): http.StatusConflict
//	- "NotFound" (type *goa.ServiceError): http.StatusNotFound
//	- "Gone" (type *goa.ServiceError): http.StatusGone
//	- "InvalidChecksumAlgorithm" (type *goa.ServiceError): http.StatusBadRequest
//	- "ChecksumMismatch" (type *goa.ServiceError): 460
//	- "Internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "InvalidTusResumable" (type *tus.ErrInvalidTUSResumable): http.StatusPreconditionFailed
//	- error: internal error
func DecodePatchResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			var (
				tusResumable  string
				uploadOffset  int64
				uploadExpires *string
				err           error
			)
			tusResumableRaw := resp.Header.Get("Tus-Resumable")
			if tusResumableRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("Tus-Resumable", "header"))
			}
			tusResumable = tusResumableRaw
			err = goa.MergeErrors(err, goa.ValidatePattern("tusResumable", tusResumable, "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(-(0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(\\.(0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*)?(\\+[0-9a-zA-Z-]+(\\.[0-9a-zA-Z-]+)*)?$"))
			{
				uploadOffsetRaw := resp.Header.Get("Upload-Offset")
				if uploadOffsetRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "patch", goa.MissingFieldError("Upload-Offset", "header"))
				}
				v, err2 := strconv.ParseInt(uploadOffsetRaw, 10, 64)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("uploadOffset", uploadOffsetRaw, "integer"))
				}
				uploadOffset = v
			}
			uploadExpiresRaw := resp.Header.Get("Upload-Expires")
			if uploadExpiresRaw != "" {
				uploadExpires = &uploadExpiresRaw
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("tus", "patch", err)
			}
			res := NewPatchResultNoContent(tusResumable, uploadOffset, uploadExpires)
			return res, nil
		case http.StatusUnsupportedMediaType:
			var (
				name      string
				id        string
				message   string
				temporary bool
				timeout   bool
				fault     bool
				err       error
			)
			nameRaw := resp.Header.Get("Goa-Attribute-Name")
			if nameRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-name", "header"))
			}
			name = nameRaw
			idRaw := resp.Header.Get("Goa-Attribute-Id")
			if idRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-id", "header"))
			}
			id = idRaw
			messageRaw := resp.Header.Get("Goa-Attribute-Message")
			if messageRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-message", "header"))
			}
			message = messageRaw
			{
				temporaryRaw := resp.Header.Get("Goa-Attribute-Temporary")
				if temporaryRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "patch", goa.MissingFieldError("goa-attribute-temporary", "header"))
				}
				v, err2 := strconv.ParseBool(temporaryRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("temporary", temporaryRaw, "boolean"))
				}
				temporary = v
			}
			{
				timeoutRaw := resp.Header.Get("Goa-Attribute-Timeout")
				if timeoutRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "patch", goa.MissingFieldError("goa-attribute-timeout", "header"))
				}
				v, err2 := strconv.ParseBool(timeoutRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("timeout", timeoutRaw, "boolean"))
				}
				timeout = v
			}
			{
				faultRaw := resp.Header.Get("Goa-Attribute-Fault")
				if faultRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "patch", goa.MissingFieldError("goa-attribute-fault", "header"))
				}
				v, err2 := strconv.ParseBool(faultRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("fault", faultRaw, "boolean"))
				}
				fault = v
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("tus", "patch", err)
			}
			return nil, NewPatchInvalidContentType(name, id, message, temporary, timeout, fault)
		case http.StatusConflict:
			var (
				name      string
				id        string
				message   string
				temporary bool
				timeout   bool
				fault     bool
				err       error
			)
			nameRaw := resp.Header.Get("Goa-Attribute-Name")
			if nameRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-name", "header"))
			}
			name = nameRaw
			idRaw := resp.Header.Get("Goa-Attribute-Id")
			if idRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-id", "header"))
			}
			id = idRaw
			messageRaw := resp.Header.Get("Goa-Attribute-Message")
			if messageRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-message", "header"))
			}
			message = messageRaw
			{
				temporaryRaw := resp.Header.Get("Goa-Attribute-Temporary")
				if temporaryRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "patch", goa.MissingFieldError("goa-attribute-temporary", "header"))
				}
				v, err2 := strconv.ParseBool(temporaryRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("temporary", temporaryRaw, "boolean"))
				}
				temporary = v
			}
			{
				timeoutRaw := resp.Header.Get("Goa-Attribute-Timeout")
				if timeoutRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "patch", goa.MissingFieldError("goa-attribute-timeout", "header"))
				}
				v, err2 := strconv.ParseBool(timeoutRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("timeout", timeoutRaw, "boolean"))
				}
				timeout = v
			}
			{
				faultRaw := resp.Header.Get("Goa-Attribute-Fault")
				if faultRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "patch", goa.MissingFieldError("goa-attribute-fault", "header"))
				}
				v, err2 := strconv.ParseBool(faultRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("fault", faultRaw, "boolean"))
				}
				fault = v
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("tus", "patch", err)
			}
			return nil, NewPatchInvalidOffset(name, id, message, temporary, timeout, fault)
		case http.StatusNotFound:
			var (
				name      string
				id        string
				message   string
				temporary bool
				timeout   bool
				fault     bool
				err       error
			)
			nameRaw := resp.Header.Get("Goa-Attribute-Name")
			if nameRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-name", "header"))
			}
			name = nameRaw
			idRaw := resp.Header.Get("Goa-Attribute-Id")
			if idRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-id", "header"))
			}
			id = idRaw
			messageRaw := resp.Header.Get("Goa-Attribute-Message")
			if messageRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-message", "header"))
			}
			message = messageRaw
			{
				temporaryRaw := resp.Header.Get("Goa-Attribute-Temporary")
				if temporaryRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "patch", goa.MissingFieldError("goa-attribute-temporary", "header"))
				}
				v, err2 := strconv.ParseBool(temporaryRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("temporary", temporaryRaw, "boolean"))
				}
				temporary = v
			}
			{
				timeoutRaw := resp.Header.Get("Goa-Attribute-Timeout")
				if timeoutRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "patch", goa.MissingFieldError("goa-attribute-timeout", "header"))
				}
				v, err2 := strconv.ParseBool(timeoutRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("timeout", timeoutRaw, "boolean"))
				}
				timeout = v
			}
			{
				faultRaw := resp.Header.Get("Goa-Attribute-Fault")
				if faultRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "patch", goa.MissingFieldError("goa-attribute-fault", "header"))
				}
				v, err2 := strconv.ParseBool(faultRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("fault", faultRaw, "boolean"))
				}
				fault = v
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("tus", "patch", err)
			}
			return nil, NewPatchNotFound(name, id, message, temporary, timeout, fault)
		case http.StatusGone:
			var (
				name      string
				id        string
				message   string
				temporary bool
				timeout   bool
				fault     bool
				err       error
			)
			nameRaw := resp.Header.Get("Goa-Attribute-Name")
			if nameRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-name", "header"))
			}
			name = nameRaw
			idRaw := resp.Header.Get("Goa-Attribute-Id")
			if idRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-id", "header"))
			}
			id = idRaw
			messageRaw := resp.Header.Get("Goa-Attribute-Message")
			if messageRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-message", "header"))
			}
			message = messageRaw
			{
				temporaryRaw := resp.Header.Get("Goa-Attribute-Temporary")
				if temporaryRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "patch", goa.MissingFieldError("goa-attribute-temporary", "header"))
				}
				v, err2 := strconv.ParseBool(temporaryRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("temporary", temporaryRaw, "boolean"))
				}
				temporary = v
			}
			{
				timeoutRaw := resp.Header.Get("Goa-Attribute-Timeout")
				if timeoutRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "patch", goa.MissingFieldError("goa-attribute-timeout", "header"))
				}
				v, err2 := strconv.ParseBool(timeoutRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("timeout", timeoutRaw, "boolean"))
				}
				timeout = v
			}
			{
				faultRaw := resp.Header.Get("Goa-Attribute-Fault")
				if faultRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "patch", goa.MissingFieldError("goa-attribute-fault", "header"))
				}
				v, err2 := strconv.ParseBool(faultRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("fault", faultRaw, "boolean"))
				}
				fault = v
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("tus", "patch", err)
			}
			return nil, NewPatchGone(name, id, message, temporary, timeout, fault)
		case http.StatusBadRequest:
			var (
				name      string
				id        string
				message   string
				temporary bool
				timeout   bool
				fault     bool
				err       error
			)
			nameRaw := resp.Header.Get("Goa-Attribute-Name")
			if nameRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-name", "header"))
			}
			name = nameRaw
			idRaw := resp.Header.Get("Goa-Attribute-Id")
			if idRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-id", "header"))
			}
			id = idRaw
			messageRaw := resp.Header.Get("Goa-Attribute-Message")
			if messageRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-message", "header"))
			}
			message = messageRaw
			{
				temporaryRaw := resp.Header.Get("Goa-Attribute-Temporary")
				if temporaryRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "patch", goa.MissingFieldError("goa-attribute-temporary", "header"))
				}
				v, err2 := strconv.ParseBool(temporaryRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("temporary", temporaryRaw, "boolean"))
				}
				temporary = v
			}
			{
				timeoutRaw := resp.Header.Get("Goa-Attribute-Timeout")
				if timeoutRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "patch", goa.MissingFieldError("goa-attribute-timeout", "header"))
				}
				v, err2 := strconv.ParseBool(timeoutRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("timeout", timeoutRaw, "boolean"))
				}
				timeout = v
			}
			{
				faultRaw := resp.Header.Get("Goa-Attribute-Fault")
				if faultRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "patch", goa.MissingFieldError("goa-attribute-fault", "header"))
				}
				v, err2 := strconv.ParseBool(faultRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("fault", faultRaw, "boolean"))
				}
				fault = v
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("tus", "patch", err)
			}
			return nil, NewPatchInvalidChecksumAlgorithm(name, id, message, temporary, timeout, fault)
		case 460:
			var (
				name      string
				id        string
				message   string
				temporary bool
				timeout   bool
				fault     bool
				err       error
			)
			nameRaw := resp.Header.Get("Goa-Attribute-Name")
			if nameRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-name", "header"))
			}
			name = nameRaw
			idRaw := resp.Header.Get("Goa-Attribute-Id")
			if idRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-id", "header"))
			}
			id = idRaw
			messageRaw := resp.Header.Get("Goa-Attribute-Message")
			if messageRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-message", "header"))
			}
			message = messageRaw
			{
				temporaryRaw := resp.Header.Get("Goa-Attribute-Temporary")
				if temporaryRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "patch", goa.MissingFieldError("goa-attribute-temporary", "header"))
				}
				v, err2 := strconv.ParseBool(temporaryRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("temporary", temporaryRaw, "boolean"))
				}
				temporary = v
			}
			{
				timeoutRaw := resp.Header.Get("Goa-Attribute-Timeout")
				if timeoutRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "patch", goa.MissingFieldError("goa-attribute-timeout", "header"))
				}
				v, err2 := strconv.ParseBool(timeoutRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("timeout", timeoutRaw, "boolean"))
				}
				timeout = v
			}
			{
				faultRaw := resp.Header.Get("Goa-Attribute-Fault")
				if faultRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "patch", goa.MissingFieldError("goa-attribute-fault", "header"))
				}
				v, err2 := strconv.ParseBool(faultRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("fault", faultRaw, "boolean"))
				}
				fault = v
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("tus", "patch", err)
			}
			return nil, NewPatchChecksumMismatch(name, id, message, temporary, timeout, fault)
		case http.StatusInternalServerError:
			var (
				name      string
				id        string
				message   string
				temporary bool
				timeout   bool
				fault     bool
				err       error
			)
			nameRaw := resp.Header.Get("Goa-Attribute-Name")
			if nameRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-name", "header"))
			}
			name = nameRaw
			idRaw := resp.Header.Get("Goa-Attribute-Id")
			if idRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-id", "header"))
			}
			id = idRaw
			messageRaw := resp.Header.Get("Goa-Attribute-Message")
			if messageRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-message", "header"))
			}
			message = messageRaw
			{
				temporaryRaw := resp.Header.Get("Goa-Attribute-Temporary")
				if temporaryRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "patch", goa.MissingFieldError("goa-attribute-temporary", "header"))
				}
				v, err2 := strconv.ParseBool(temporaryRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("temporary", temporaryRaw, "boolean"))
				}
				temporary = v
			}
			{
				timeoutRaw := resp.Header.Get("Goa-Attribute-Timeout")
				if timeoutRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "patch", goa.MissingFieldError("goa-attribute-timeout", "header"))
				}
				v, err2 := strconv.ParseBool(timeoutRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("timeout", timeoutRaw, "boolean"))
				}
				timeout = v
			}
			{
				faultRaw := resp.Header.Get("Goa-Attribute-Fault")
				if faultRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "patch", goa.MissingFieldError("goa-attribute-fault", "header"))
				}
				v, err2 := strconv.ParseBool(faultRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("fault", faultRaw, "boolean"))
				}
				fault = v
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("tus", "patch", err)
			}
			return nil, NewPatchInternal(name, id, message, temporary, timeout, fault)
		case http.StatusPreconditionFailed:
			var (
				tusVersion string
				err        error
			)
			tusVersionRaw := resp.Header.Get("Tus-Version")
			if tusVersionRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("Tus-Version", "header"))
			}
			tusVersion = tusVersionRaw
			if !(tusVersion == "1.0.0") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("tusVersion", tusVersion, []interface{}{"1.0.0"}))
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("tus", "patch", err)
			}
			return nil, NewPatchInvalidTusResumable(tusVersion)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tus", "patch", resp.StatusCode, string(body))
		}
	}
}

// // BuildPatchStreamPayload creates a streaming endpoint request payload from
// the method payload and the path to the file to be streamed
func BuildPatchStreamPayload(payload interface{}, fpath string) (*tus.PatchRequestData, error) {
	f, err := os.Open(fpath)
	if err != nil {
		return nil, err
	}
	return &tus.PatchRequestData{
		Payload: payload.(*tus.PatchPayload),
		Body:    f,
	}, nil
}

// BuildOptionsRequest instantiates a HTTP request object with method and path
// set to call the "tus" service "options" endpoint
func (c *Client) BuildOptionsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: OptionsTusPath()}
	req, err := http.NewRequest("OPTIONS", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tus", "options", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeOptionsResponse returns a decoder for responses returned by the tus
// options endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeOptionsResponse may return the following errors:
//	- "InvalidTusResumable" (type *tus.ErrInvalidTUSResumable): http.StatusPreconditionFailed
//	- error: internal error
func DecodeOptionsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			var (
				tusResumable         string
				tusVersion           string
				tusExtension         string
				tusMaxSize           *int64
				tusChecksumAlgorithm string
				err                  error
			)
			tusResumableRaw := resp.Header.Get("Tus-Resumable")
			if tusResumableRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("Tus-Resumable", "header"))
			}
			tusResumable = tusResumableRaw
			err = goa.MergeErrors(err, goa.ValidatePattern("tusResumable", tusResumable, "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(-(0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(\\.(0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*)?(\\+[0-9a-zA-Z-]+(\\.[0-9a-zA-Z-]+)*)?$"))
			tusVersionRaw := resp.Header.Get("Tus-Version")
			if tusVersionRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("Tus-Version", "header"))
			}
			tusVersion = tusVersionRaw
			if !(tusVersion == "1.0.0") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("tusVersion", tusVersion, []interface{}{"1.0.0"}))
			}
			tusExtensionRaw := resp.Header.Get("Tus-Extension")
			if tusExtensionRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("Tus-Extension", "header"))
			}
			tusExtension = tusExtensionRaw
			if !(tusExtension == "creation,creation-with-upload,creation-defer-length,expiration,checksum,termination") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("tusExtension", tusExtension, []interface{}{"creation,creation-with-upload,creation-defer-length,expiration,checksum,termination"}))
			}
			{
				tusMaxSizeRaw := resp.Header.Get("Tus-Max-Size")
				if tusMaxSizeRaw != "" {
					v, err2 := strconv.ParseInt(tusMaxSizeRaw, 10, 64)
					if err2 != nil {
						err = goa.MergeErrors(err, goa.InvalidFieldTypeError("tusMaxSize", tusMaxSizeRaw, "integer"))
					}
					tusMaxSize = &v
				}
			}
			tusChecksumAlgorithmRaw := resp.Header.Get("Tus-Checksum-Algorithm")
			if tusChecksumAlgorithmRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("Tus-Checksum-Algorithm", "header"))
			}
			tusChecksumAlgorithm = tusChecksumAlgorithmRaw
			if !(tusChecksumAlgorithm == "md5,sha1,crc32") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("tusChecksumAlgorithm", tusChecksumAlgorithm, []interface{}{"md5,sha1,crc32"}))
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("tus", "options", err)
			}
			res := NewOptionsResultNoContent(tusResumable, tusVersion, tusExtension, tusMaxSize, tusChecksumAlgorithm)
			return res, nil
		case http.StatusPreconditionFailed:
			var (
				tusVersion string
				err        error
			)
			tusVersionRaw := resp.Header.Get("Tus-Version")
			if tusVersionRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("Tus-Version", "header"))
			}
			tusVersion = tusVersionRaw
			if !(tusVersion == "1.0.0") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("tusVersion", tusVersion, []interface{}{"1.0.0"}))
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("tus", "options", err)
			}
			return nil, NewOptionsInvalidTusResumable(tusVersion)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tus", "options", resp.StatusCode, string(body))
		}
	}
}

// BuildPostRequest instantiates a HTTP request object with method and path set
// to call the "tus" service "post" endpoint
func (c *Client) BuildPostRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		body io.Reader
	)
	rd, ok := v.(*tus.PostRequestData)
	if !ok {
		return nil, goahttp.ErrInvalidType("tus", "post", "tus.PostRequestData", v)
	}
	body = rd.Body
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: PostTusPath()}
	req, err := http.NewRequest("POST", u.String(), body)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tus", "post", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodePostRequest returns an encoder for requests sent to the tus post
// server.
func EncodePostRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		data, ok := v.(*tus.PostRequestData)
		if !ok {
			return goahttp.ErrInvalidType("tus", "post", "*tus.PostRequestData", v)
		}
		p := data.Payload
		{
			head := p.TusResumable
			req.Header.Set("Tus-Resumable", head)
		}
		if p.UploadLength != nil {
			head := *p.UploadLength
			headStr := strconv.FormatInt(head, 10)
			req.Header.Set("Upload-Length", headStr)
		}
		if p.UploadDeferLength != nil {
			head := *p.UploadDeferLength
			headStr := strconv.Itoa(head)
			req.Header.Set("Upload-Defer-Length", headStr)
		}
		if p.UploadChecksum != nil {
			head := *p.UploadChecksum
			req.Header.Set("Upload-Checksum", head)
		}
		if p.UploadMetadata != nil {
			head := *p.UploadMetadata
			req.Header.Set("Upload-Metadata", head)
		}
		if p.TusMaxSize != nil {
			head := *p.TusMaxSize
			headStr := strconv.FormatInt(head, 10)
			req.Header.Set("Tus-Max-Size", headStr)
		}
		return nil
	}
}

// DecodePostResponse returns a decoder for responses returned by the tus post
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
// DecodePostResponse may return the following errors:
//	- "MissingHeader" (type *goa.ServiceError): http.StatusBadRequest
//	- "InvalidDeferLength" (type *goa.ServiceError): http.StatusBadRequest
//	- "InvalidChecksumAlgorithm" (type *goa.ServiceError): http.StatusBadRequest
//	- "MaximumSizeExceeded" (type *goa.ServiceError): http.StatusRequestEntityTooLarge
//	- "ChecksumMismatch" (type *goa.ServiceError): 460
//	- "InvalidTusResumable" (type *tus.ErrInvalidTUSResumable): http.StatusPreconditionFailed
//	- error: internal error
func DecodePostResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				location      string
				tusResumable  string
				uploadOffset  int64
				uploadExpires *string
				err           error
			)
			locationRaw := resp.Header.Get("Location")
			if locationRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("Location", "header"))
			}
			location = locationRaw
			err = goa.MergeErrors(err, goa.ValidateFormat("location", location, goa.FormatURI))

			tusResumableRaw := resp.Header.Get("Tus-Resumable")
			if tusResumableRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("Tus-Resumable", "header"))
			}
			tusResumable = tusResumableRaw
			err = goa.MergeErrors(err, goa.ValidatePattern("tusResumable", tusResumable, "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(-(0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(\\.(0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*)?(\\+[0-9a-zA-Z-]+(\\.[0-9a-zA-Z-]+)*)?$"))
			{
				uploadOffsetRaw := resp.Header.Get("Upload-Offset")
				if uploadOffsetRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "post", goa.MissingFieldError("Upload-Offset", "header"))
				}
				v, err2 := strconv.ParseInt(uploadOffsetRaw, 10, 64)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("uploadOffset", uploadOffsetRaw, "integer"))
				}
				uploadOffset = v
			}
			uploadExpiresRaw := resp.Header.Get("Upload-Expires")
			if uploadExpiresRaw != "" {
				uploadExpires = &uploadExpiresRaw
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("tus", "post", err)
			}
			res := NewPostResultCreated(location, tusResumable, uploadOffset, uploadExpires)
			return res, nil
		case http.StatusBadRequest:
			en := resp.Header.Get("goa-error")
			switch en {
			case "MissingHeader":
				var (
					name      string
					id        string
					message   string
					temporary bool
					timeout   bool
					fault     bool
					err       error
				)
				nameRaw := resp.Header.Get("Goa-Attribute-Name")
				if nameRaw == "" {
					err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-name", "header"))
				}
				name = nameRaw
				idRaw := resp.Header.Get("Goa-Attribute-Id")
				if idRaw == "" {
					err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-id", "header"))
				}
				id = idRaw
				messageRaw := resp.Header.Get("Goa-Attribute-Message")
				if messageRaw == "" {
					err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-message", "header"))
				}
				message = messageRaw
				{
					temporaryRaw := resp.Header.Get("Goa-Attribute-Temporary")
					if temporaryRaw == "" {
						return nil, goahttp.ErrValidationError("tus", "post", goa.MissingFieldError("goa-attribute-temporary", "header"))
					}
					v, err2 := strconv.ParseBool(temporaryRaw)
					if err2 != nil {
						err = goa.MergeErrors(err, goa.InvalidFieldTypeError("temporary", temporaryRaw, "boolean"))
					}
					temporary = v
				}
				{
					timeoutRaw := resp.Header.Get("Goa-Attribute-Timeout")
					if timeoutRaw == "" {
						return nil, goahttp.ErrValidationError("tus", "post", goa.MissingFieldError("goa-attribute-timeout", "header"))
					}
					v, err2 := strconv.ParseBool(timeoutRaw)
					if err2 != nil {
						err = goa.MergeErrors(err, goa.InvalidFieldTypeError("timeout", timeoutRaw, "boolean"))
					}
					timeout = v
				}
				{
					faultRaw := resp.Header.Get("Goa-Attribute-Fault")
					if faultRaw == "" {
						return nil, goahttp.ErrValidationError("tus", "post", goa.MissingFieldError("goa-attribute-fault", "header"))
					}
					v, err2 := strconv.ParseBool(faultRaw)
					if err2 != nil {
						err = goa.MergeErrors(err, goa.InvalidFieldTypeError("fault", faultRaw, "boolean"))
					}
					fault = v
				}
				if err != nil {
					return nil, goahttp.ErrValidationError("tus", "post", err)
				}
				return nil, NewPostMissingHeader(name, id, message, temporary, timeout, fault)
			case "InvalidDeferLength":
				var (
					name      string
					id        string
					message   string
					temporary bool
					timeout   bool
					fault     bool
					err       error
				)
				nameRaw := resp.Header.Get("Goa-Attribute-Name")
				if nameRaw == "" {
					err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-name", "header"))
				}
				name = nameRaw
				idRaw := resp.Header.Get("Goa-Attribute-Id")
				if idRaw == "" {
					err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-id", "header"))
				}
				id = idRaw
				messageRaw := resp.Header.Get("Goa-Attribute-Message")
				if messageRaw == "" {
					err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-message", "header"))
				}
				message = messageRaw
				{
					temporaryRaw := resp.Header.Get("Goa-Attribute-Temporary")
					if temporaryRaw == "" {
						return nil, goahttp.ErrValidationError("tus", "post", goa.MissingFieldError("goa-attribute-temporary", "header"))
					}
					v, err2 := strconv.ParseBool(temporaryRaw)
					if err2 != nil {
						err = goa.MergeErrors(err, goa.InvalidFieldTypeError("temporary", temporaryRaw, "boolean"))
					}
					temporary = v
				}
				{
					timeoutRaw := resp.Header.Get("Goa-Attribute-Timeout")
					if timeoutRaw == "" {
						return nil, goahttp.ErrValidationError("tus", "post", goa.MissingFieldError("goa-attribute-timeout", "header"))
					}
					v, err2 := strconv.ParseBool(timeoutRaw)
					if err2 != nil {
						err = goa.MergeErrors(err, goa.InvalidFieldTypeError("timeout", timeoutRaw, "boolean"))
					}
					timeout = v
				}
				{
					faultRaw := resp.Header.Get("Goa-Attribute-Fault")
					if faultRaw == "" {
						return nil, goahttp.ErrValidationError("tus", "post", goa.MissingFieldError("goa-attribute-fault", "header"))
					}
					v, err2 := strconv.ParseBool(faultRaw)
					if err2 != nil {
						err = goa.MergeErrors(err, goa.InvalidFieldTypeError("fault", faultRaw, "boolean"))
					}
					fault = v
				}
				if err != nil {
					return nil, goahttp.ErrValidationError("tus", "post", err)
				}
				return nil, NewPostInvalidDeferLength(name, id, message, temporary, timeout, fault)
			case "InvalidChecksumAlgorithm":
				var (
					name      string
					id        string
					message   string
					temporary bool
					timeout   bool
					fault     bool
					err       error
				)
				nameRaw := resp.Header.Get("Goa-Attribute-Name")
				if nameRaw == "" {
					err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-name", "header"))
				}
				name = nameRaw
				idRaw := resp.Header.Get("Goa-Attribute-Id")
				if idRaw == "" {
					err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-id", "header"))
				}
				id = idRaw
				messageRaw := resp.Header.Get("Goa-Attribute-Message")
				if messageRaw == "" {
					err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-message", "header"))
				}
				message = messageRaw
				{
					temporaryRaw := resp.Header.Get("Goa-Attribute-Temporary")
					if temporaryRaw == "" {
						return nil, goahttp.ErrValidationError("tus", "post", goa.MissingFieldError("goa-attribute-temporary", "header"))
					}
					v, err2 := strconv.ParseBool(temporaryRaw)
					if err2 != nil {
						err = goa.MergeErrors(err, goa.InvalidFieldTypeError("temporary", temporaryRaw, "boolean"))
					}
					temporary = v
				}
				{
					timeoutRaw := resp.Header.Get("Goa-Attribute-Timeout")
					if timeoutRaw == "" {
						return nil, goahttp.ErrValidationError("tus", "post", goa.MissingFieldError("goa-attribute-timeout", "header"))
					}
					v, err2 := strconv.ParseBool(timeoutRaw)
					if err2 != nil {
						err = goa.MergeErrors(err, goa.InvalidFieldTypeError("timeout", timeoutRaw, "boolean"))
					}
					timeout = v
				}
				{
					faultRaw := resp.Header.Get("Goa-Attribute-Fault")
					if faultRaw == "" {
						return nil, goahttp.ErrValidationError("tus", "post", goa.MissingFieldError("goa-attribute-fault", "header"))
					}
					v, err2 := strconv.ParseBool(faultRaw)
					if err2 != nil {
						err = goa.MergeErrors(err, goa.InvalidFieldTypeError("fault", faultRaw, "boolean"))
					}
					fault = v
				}
				if err != nil {
					return nil, goahttp.ErrValidationError("tus", "post", err)
				}
				return nil, NewPostInvalidChecksumAlgorithm(name, id, message, temporary, timeout, fault)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("tus", "post", resp.StatusCode, string(body))
			}
		case http.StatusRequestEntityTooLarge:
			var (
				name      string
				id        string
				message   string
				temporary bool
				timeout   bool
				fault     bool
				err       error
			)
			nameRaw := resp.Header.Get("Goa-Attribute-Name")
			if nameRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-name", "header"))
			}
			name = nameRaw
			idRaw := resp.Header.Get("Goa-Attribute-Id")
			if idRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-id", "header"))
			}
			id = idRaw
			messageRaw := resp.Header.Get("Goa-Attribute-Message")
			if messageRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-message", "header"))
			}
			message = messageRaw
			{
				temporaryRaw := resp.Header.Get("Goa-Attribute-Temporary")
				if temporaryRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "post", goa.MissingFieldError("goa-attribute-temporary", "header"))
				}
				v, err2 := strconv.ParseBool(temporaryRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("temporary", temporaryRaw, "boolean"))
				}
				temporary = v
			}
			{
				timeoutRaw := resp.Header.Get("Goa-Attribute-Timeout")
				if timeoutRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "post", goa.MissingFieldError("goa-attribute-timeout", "header"))
				}
				v, err2 := strconv.ParseBool(timeoutRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("timeout", timeoutRaw, "boolean"))
				}
				timeout = v
			}
			{
				faultRaw := resp.Header.Get("Goa-Attribute-Fault")
				if faultRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "post", goa.MissingFieldError("goa-attribute-fault", "header"))
				}
				v, err2 := strconv.ParseBool(faultRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("fault", faultRaw, "boolean"))
				}
				fault = v
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("tus", "post", err)
			}
			return nil, NewPostMaximumSizeExceeded(name, id, message, temporary, timeout, fault)
		case 460:
			var (
				name      string
				id        string
				message   string
				temporary bool
				timeout   bool
				fault     bool
				err       error
			)
			nameRaw := resp.Header.Get("Goa-Attribute-Name")
			if nameRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-name", "header"))
			}
			name = nameRaw
			idRaw := resp.Header.Get("Goa-Attribute-Id")
			if idRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-id", "header"))
			}
			id = idRaw
			messageRaw := resp.Header.Get("Goa-Attribute-Message")
			if messageRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-message", "header"))
			}
			message = messageRaw
			{
				temporaryRaw := resp.Header.Get("Goa-Attribute-Temporary")
				if temporaryRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "post", goa.MissingFieldError("goa-attribute-temporary", "header"))
				}
				v, err2 := strconv.ParseBool(temporaryRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("temporary", temporaryRaw, "boolean"))
				}
				temporary = v
			}
			{
				timeoutRaw := resp.Header.Get("Goa-Attribute-Timeout")
				if timeoutRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "post", goa.MissingFieldError("goa-attribute-timeout", "header"))
				}
				v, err2 := strconv.ParseBool(timeoutRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("timeout", timeoutRaw, "boolean"))
				}
				timeout = v
			}
			{
				faultRaw := resp.Header.Get("Goa-Attribute-Fault")
				if faultRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "post", goa.MissingFieldError("goa-attribute-fault", "header"))
				}
				v, err2 := strconv.ParseBool(faultRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("fault", faultRaw, "boolean"))
				}
				fault = v
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("tus", "post", err)
			}
			return nil, NewPostChecksumMismatch(name, id, message, temporary, timeout, fault)
		case http.StatusPreconditionFailed:
			var (
				tusVersion string
				err        error
			)
			tusVersionRaw := resp.Header.Get("Tus-Version")
			if tusVersionRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("Tus-Version", "header"))
			}
			tusVersion = tusVersionRaw
			if !(tusVersion == "1.0.0") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("tusVersion", tusVersion, []interface{}{"1.0.0"}))
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("tus", "post", err)
			}
			return nil, NewPostInvalidTusResumable(tusVersion)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tus", "post", resp.StatusCode, string(body))
		}
	}
}

// // BuildPostStreamPayload creates a streaming endpoint request payload from the
// method payload and the path to the file to be streamed
func BuildPostStreamPayload(payload interface{}, fpath string) (*tus.PostRequestData, error) {
	f, err := os.Open(fpath)
	if err != nil {
		return nil, err
	}
	return &tus.PostRequestData{
		Payload: payload.(*tus.PostPayload),
		Body:    f,
	}, nil
}

// BuildDeleteRequest instantiates a HTTP request object with method and path
// set to call the "tus" service "delete" endpoint
func (c *Client) BuildDeleteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*tus.DeletePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("tus", "delete", "*tus.DeletePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteTusPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tus", "delete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteRequest returns an encoder for requests sent to the tus delete
// server.
func EncodeDeleteRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*tus.DeletePayload)
		if !ok {
			return goahttp.ErrInvalidType("tus", "delete", "*tus.DeletePayload", v)
		}
		{
			head := p.TusResumable
			req.Header.Set("Tus-Resumable", head)
		}
		return nil
	}
}

// DecodeDeleteResponse returns a decoder for responses returned by the tus
// delete endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeDeleteResponse may return the following errors:
//	- "NotFound" (type *goa.ServiceError): http.StatusNotFound
//	- "Gone" (type *goa.ServiceError): http.StatusGone
//	- "InvalidTusResumable" (type *tus.ErrInvalidTUSResumable): http.StatusPreconditionFailed
//	- error: internal error
func DecodeDeleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			var (
				tusResumable string
				err          error
			)
			tusResumableRaw := resp.Header.Get("Tus-Resumable")
			if tusResumableRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("Tus-Resumable", "header"))
			}
			tusResumable = tusResumableRaw
			err = goa.MergeErrors(err, goa.ValidatePattern("tusResumable", tusResumable, "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(-(0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(\\.(0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*)?(\\+[0-9a-zA-Z-]+(\\.[0-9a-zA-Z-]+)*)?$"))
			if err != nil {
				return nil, goahttp.ErrValidationError("tus", "delete", err)
			}
			res := NewDeleteResultNoContent(tusResumable)
			return res, nil
		case http.StatusNotFound:
			var (
				name      string
				id        string
				message   string
				temporary bool
				timeout   bool
				fault     bool
				err       error
			)
			nameRaw := resp.Header.Get("Goa-Attribute-Name")
			if nameRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-name", "header"))
			}
			name = nameRaw
			idRaw := resp.Header.Get("Goa-Attribute-Id")
			if idRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-id", "header"))
			}
			id = idRaw
			messageRaw := resp.Header.Get("Goa-Attribute-Message")
			if messageRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-message", "header"))
			}
			message = messageRaw
			{
				temporaryRaw := resp.Header.Get("Goa-Attribute-Temporary")
				if temporaryRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "delete", goa.MissingFieldError("goa-attribute-temporary", "header"))
				}
				v, err2 := strconv.ParseBool(temporaryRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("temporary", temporaryRaw, "boolean"))
				}
				temporary = v
			}
			{
				timeoutRaw := resp.Header.Get("Goa-Attribute-Timeout")
				if timeoutRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "delete", goa.MissingFieldError("goa-attribute-timeout", "header"))
				}
				v, err2 := strconv.ParseBool(timeoutRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("timeout", timeoutRaw, "boolean"))
				}
				timeout = v
			}
			{
				faultRaw := resp.Header.Get("Goa-Attribute-Fault")
				if faultRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "delete", goa.MissingFieldError("goa-attribute-fault", "header"))
				}
				v, err2 := strconv.ParseBool(faultRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("fault", faultRaw, "boolean"))
				}
				fault = v
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("tus", "delete", err)
			}
			return nil, NewDeleteNotFound(name, id, message, temporary, timeout, fault)
		case http.StatusGone:
			var (
				name      string
				id        string
				message   string
				temporary bool
				timeout   bool
				fault     bool
				err       error
			)
			nameRaw := resp.Header.Get("Goa-Attribute-Name")
			if nameRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-name", "header"))
			}
			name = nameRaw
			idRaw := resp.Header.Get("Goa-Attribute-Id")
			if idRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-id", "header"))
			}
			id = idRaw
			messageRaw := resp.Header.Get("Goa-Attribute-Message")
			if messageRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("goa-attribute-message", "header"))
			}
			message = messageRaw
			{
				temporaryRaw := resp.Header.Get("Goa-Attribute-Temporary")
				if temporaryRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "delete", goa.MissingFieldError("goa-attribute-temporary", "header"))
				}
				v, err2 := strconv.ParseBool(temporaryRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("temporary", temporaryRaw, "boolean"))
				}
				temporary = v
			}
			{
				timeoutRaw := resp.Header.Get("Goa-Attribute-Timeout")
				if timeoutRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "delete", goa.MissingFieldError("goa-attribute-timeout", "header"))
				}
				v, err2 := strconv.ParseBool(timeoutRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("timeout", timeoutRaw, "boolean"))
				}
				timeout = v
			}
			{
				faultRaw := resp.Header.Get("Goa-Attribute-Fault")
				if faultRaw == "" {
					return nil, goahttp.ErrValidationError("tus", "delete", goa.MissingFieldError("goa-attribute-fault", "header"))
				}
				v, err2 := strconv.ParseBool(faultRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("fault", faultRaw, "boolean"))
				}
				fault = v
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("tus", "delete", err)
			}
			return nil, NewDeleteGone(name, id, message, temporary, timeout, fault)
		case http.StatusPreconditionFailed:
			var (
				tusVersion string
				err        error
			)
			tusVersionRaw := resp.Header.Get("Tus-Version")
			if tusVersionRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("Tus-Version", "header"))
			}
			tusVersion = tusVersionRaw
			if !(tusVersion == "1.0.0") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("tusVersion", tusVersion, []interface{}{"1.0.0"}))
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("tus", "delete", err)
			}
			return nil, NewDeleteInvalidTusResumable(tusVersion)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tus", "delete", resp.StatusCode, string(body))
		}
	}
}
